// nios_ii_base_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module nios_ii_base_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                       //                                     clk_0_clk.clk
		input  wire        NIOS_II_Processor_reset_reset_bridge_in_reset_reset, // NIOS_II_Processor_reset_reset_bridge_in_reset.reset
		input  wire [18:0] NIOS_II_Processor_data_master_address,               //                 NIOS_II_Processor_data_master.address
		output wire        NIOS_II_Processor_data_master_waitrequest,           //                                              .waitrequest
		input  wire [3:0]  NIOS_II_Processor_data_master_byteenable,            //                                              .byteenable
		input  wire        NIOS_II_Processor_data_master_read,                  //                                              .read
		output wire [31:0] NIOS_II_Processor_data_master_readdata,              //                                              .readdata
		input  wire        NIOS_II_Processor_data_master_write,                 //                                              .write
		input  wire [31:0] NIOS_II_Processor_data_master_writedata,             //                                              .writedata
		input  wire        NIOS_II_Processor_data_master_debugaccess,           //                                              .debugaccess
		input  wire [18:0] NIOS_II_Processor_instruction_master_address,        //          NIOS_II_Processor_instruction_master.address
		output wire        NIOS_II_Processor_instruction_master_waitrequest,    //                                              .waitrequest
		input  wire        NIOS_II_Processor_instruction_master_read,           //                                              .read
		output wire [31:0] NIOS_II_Processor_instruction_master_readdata,       //                                              .readdata
		output wire [1:0]  HEX_3_avalon_parallel_port_slave_address,            //              HEX_3_avalon_parallel_port_slave.address
		output wire        HEX_3_avalon_parallel_port_slave_write,              //                                              .write
		output wire        HEX_3_avalon_parallel_port_slave_read,               //                                              .read
		input  wire [31:0] HEX_3_avalon_parallel_port_slave_readdata,           //                                              .readdata
		output wire [31:0] HEX_3_avalon_parallel_port_slave_writedata,          //                                              .writedata
		output wire [3:0]  HEX_3_avalon_parallel_port_slave_byteenable,         //                                              .byteenable
		output wire        HEX_3_avalon_parallel_port_slave_chipselect,         //                                              .chipselect
		output wire [1:0]  HEX_7_avalon_parallel_port_slave_address,            //              HEX_7_avalon_parallel_port_slave.address
		output wire        HEX_7_avalon_parallel_port_slave_write,              //                                              .write
		output wire        HEX_7_avalon_parallel_port_slave_read,               //                                              .read
		input  wire [31:0] HEX_7_avalon_parallel_port_slave_readdata,           //                                              .readdata
		output wire [31:0] HEX_7_avalon_parallel_port_slave_writedata,          //                                              .writedata
		output wire [3:0]  HEX_7_avalon_parallel_port_slave_byteenable,         //                                              .byteenable
		output wire        HEX_7_avalon_parallel_port_slave_chipselect,         //                                              .chipselect
		output wire [0:0]  JTAG_UART_avalon_jtag_slave_address,                 //                   JTAG_UART_avalon_jtag_slave.address
		output wire        JTAG_UART_avalon_jtag_slave_write,                   //                                              .write
		output wire        JTAG_UART_avalon_jtag_slave_read,                    //                                              .read
		input  wire [31:0] JTAG_UART_avalon_jtag_slave_readdata,                //                                              .readdata
		output wire [31:0] JTAG_UART_avalon_jtag_slave_writedata,               //                                              .writedata
		input  wire        JTAG_UART_avalon_jtag_slave_waitrequest,             //                                              .waitrequest
		output wire        JTAG_UART_avalon_jtag_slave_chipselect,              //                                              .chipselect
		output wire [0:0]  LCD_avalon_lcd_slave_address,                        //                          LCD_avalon_lcd_slave.address
		output wire        LCD_avalon_lcd_slave_write,                          //                                              .write
		output wire        LCD_avalon_lcd_slave_read,                           //                                              .read
		input  wire [7:0]  LCD_avalon_lcd_slave_readdata,                       //                                              .readdata
		output wire [7:0]  LCD_avalon_lcd_slave_writedata,                      //                                              .writedata
		input  wire        LCD_avalon_lcd_slave_waitrequest,                    //                                              .waitrequest
		output wire        LCD_avalon_lcd_slave_chipselect,                     //                                              .chipselect
		output wire [1:0]  LEDS_GREEN_avalon_parallel_port_slave_address,       //         LEDS_GREEN_avalon_parallel_port_slave.address
		output wire        LEDS_GREEN_avalon_parallel_port_slave_write,         //                                              .write
		output wire        LEDS_GREEN_avalon_parallel_port_slave_read,          //                                              .read
		input  wire [31:0] LEDS_GREEN_avalon_parallel_port_slave_readdata,      //                                              .readdata
		output wire [31:0] LEDS_GREEN_avalon_parallel_port_slave_writedata,     //                                              .writedata
		output wire [3:0]  LEDS_GREEN_avalon_parallel_port_slave_byteenable,    //                                              .byteenable
		output wire        LEDS_GREEN_avalon_parallel_port_slave_chipselect,    //                                              .chipselect
		output wire [1:0]  LEDS_RED_avalon_parallel_port_slave_address,         //           LEDS_RED_avalon_parallel_port_slave.address
		output wire        LEDS_RED_avalon_parallel_port_slave_write,           //                                              .write
		output wire        LEDS_RED_avalon_parallel_port_slave_read,            //                                              .read
		input  wire [31:0] LEDS_RED_avalon_parallel_port_slave_readdata,        //                                              .readdata
		output wire [31:0] LEDS_RED_avalon_parallel_port_slave_writedata,       //                                              .writedata
		output wire [3:0]  LEDS_RED_avalon_parallel_port_slave_byteenable,      //                                              .byteenable
		output wire        LEDS_RED_avalon_parallel_port_slave_chipselect,      //                                              .chipselect
		output wire [8:0]  NIOS_II_Processor_debug_mem_slave_address,           //             NIOS_II_Processor_debug_mem_slave.address
		output wire        NIOS_II_Processor_debug_mem_slave_write,             //                                              .write
		output wire        NIOS_II_Processor_debug_mem_slave_read,              //                                              .read
		input  wire [31:0] NIOS_II_Processor_debug_mem_slave_readdata,          //                                              .readdata
		output wire [31:0] NIOS_II_Processor_debug_mem_slave_writedata,         //                                              .writedata
		output wire [3:0]  NIOS_II_Processor_debug_mem_slave_byteenable,        //                                              .byteenable
		input  wire        NIOS_II_Processor_debug_mem_slave_waitrequest,       //                                              .waitrequest
		output wire        NIOS_II_Processor_debug_mem_slave_debugaccess,       //                                              .debugaccess
		output wire [13:0] OnChip_Memory_s1_address,                            //                              OnChip_Memory_s1.address
		output wire        OnChip_Memory_s1_write,                              //                                              .write
		input  wire [63:0] OnChip_Memory_s1_readdata,                           //                                              .readdata
		output wire [63:0] OnChip_Memory_s1_writedata,                          //                                              .writedata
		output wire [7:0]  OnChip_Memory_s1_byteenable,                         //                                              .byteenable
		output wire        OnChip_Memory_s1_chipselect,                         //                                              .chipselect
		output wire        OnChip_Memory_s1_clken,                              //                                              .clken
		output wire [1:0]  Pushbuttons_avalon_parallel_port_slave_address,      //        Pushbuttons_avalon_parallel_port_slave.address
		output wire        Pushbuttons_avalon_parallel_port_slave_write,        //                                              .write
		output wire        Pushbuttons_avalon_parallel_port_slave_read,         //                                              .read
		input  wire [31:0] Pushbuttons_avalon_parallel_port_slave_readdata,     //                                              .readdata
		output wire [31:0] Pushbuttons_avalon_parallel_port_slave_writedata,    //                                              .writedata
		output wire [3:0]  Pushbuttons_avalon_parallel_port_slave_byteenable,   //                                              .byteenable
		output wire        Pushbuttons_avalon_parallel_port_slave_chipselect,   //                                              .chipselect
		output wire [1:0]  SW_SLIDERS_avalon_parallel_port_slave_address,       //         SW_SLIDERS_avalon_parallel_port_slave.address
		output wire        SW_SLIDERS_avalon_parallel_port_slave_write,         //                                              .write
		output wire        SW_SLIDERS_avalon_parallel_port_slave_read,          //                                              .read
		input  wire [31:0] SW_SLIDERS_avalon_parallel_port_slave_readdata,      //                                              .readdata
		output wire [31:0] SW_SLIDERS_avalon_parallel_port_slave_writedata,     //                                              .writedata
		output wire [3:0]  SW_SLIDERS_avalon_parallel_port_slave_byteenable,    //                                              .byteenable
		output wire        SW_SLIDERS_avalon_parallel_port_slave_chipselect,    //                                              .chipselect
		output wire [2:0]  timer_0_s1_address,                                  //                                    timer_0_s1.address
		output wire        timer_0_s1_write,                                    //                                              .write
		input  wire [15:0] timer_0_s1_readdata,                                 //                                              .readdata
		output wire [15:0] timer_0_s1_writedata,                                //                                              .writedata
		output wire        timer_0_s1_chipselect,                               //                                              .chipselect
		output wire [2:0]  timer_1_s1_address,                                  //                                    timer_1_s1.address
		output wire        timer_1_s1_write,                                    //                                              .write
		input  wire [15:0] timer_1_s1_readdata,                                 //                                              .readdata
		output wire [15:0] timer_1_s1_writedata,                                //                                              .writedata
		output wire        timer_1_s1_chipselect                                //                                              .chipselect
	);

	wire          nios_ii_processor_data_master_translator_avalon_universal_master_0_waitrequest;          // NIOS_II_Processor_data_master_agent:av_waitrequest -> NIOS_II_Processor_data_master_translator:uav_waitrequest
	wire   [31:0] nios_ii_processor_data_master_translator_avalon_universal_master_0_readdata;             // NIOS_II_Processor_data_master_agent:av_readdata -> NIOS_II_Processor_data_master_translator:uav_readdata
	wire          nios_ii_processor_data_master_translator_avalon_universal_master_0_debugaccess;          // NIOS_II_Processor_data_master_translator:uav_debugaccess -> NIOS_II_Processor_data_master_agent:av_debugaccess
	wire   [18:0] nios_ii_processor_data_master_translator_avalon_universal_master_0_address;              // NIOS_II_Processor_data_master_translator:uav_address -> NIOS_II_Processor_data_master_agent:av_address
	wire          nios_ii_processor_data_master_translator_avalon_universal_master_0_read;                 // NIOS_II_Processor_data_master_translator:uav_read -> NIOS_II_Processor_data_master_agent:av_read
	wire    [3:0] nios_ii_processor_data_master_translator_avalon_universal_master_0_byteenable;           // NIOS_II_Processor_data_master_translator:uav_byteenable -> NIOS_II_Processor_data_master_agent:av_byteenable
	wire          nios_ii_processor_data_master_translator_avalon_universal_master_0_readdatavalid;        // NIOS_II_Processor_data_master_agent:av_readdatavalid -> NIOS_II_Processor_data_master_translator:uav_readdatavalid
	wire          nios_ii_processor_data_master_translator_avalon_universal_master_0_lock;                 // NIOS_II_Processor_data_master_translator:uav_lock -> NIOS_II_Processor_data_master_agent:av_lock
	wire          nios_ii_processor_data_master_translator_avalon_universal_master_0_write;                // NIOS_II_Processor_data_master_translator:uav_write -> NIOS_II_Processor_data_master_agent:av_write
	wire   [31:0] nios_ii_processor_data_master_translator_avalon_universal_master_0_writedata;            // NIOS_II_Processor_data_master_translator:uav_writedata -> NIOS_II_Processor_data_master_agent:av_writedata
	wire    [2:0] nios_ii_processor_data_master_translator_avalon_universal_master_0_burstcount;           // NIOS_II_Processor_data_master_translator:uav_burstcount -> NIOS_II_Processor_data_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                       // rsp_mux:src_valid -> NIOS_II_Processor_data_master_agent:rp_valid
	wire   [97:0] rsp_mux_src_data;                                                                        // rsp_mux:src_data -> NIOS_II_Processor_data_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                       // NIOS_II_Processor_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [11:0] rsp_mux_src_channel;                                                                     // rsp_mux:src_channel -> NIOS_II_Processor_data_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                               // rsp_mux:src_startofpacket -> NIOS_II_Processor_data_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                 // rsp_mux:src_endofpacket -> NIOS_II_Processor_data_master_agent:rp_endofpacket
	wire          nios_ii_processor_instruction_master_translator_avalon_universal_master_0_waitrequest;   // NIOS_II_Processor_instruction_master_agent:av_waitrequest -> NIOS_II_Processor_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios_ii_processor_instruction_master_translator_avalon_universal_master_0_readdata;      // NIOS_II_Processor_instruction_master_agent:av_readdata -> NIOS_II_Processor_instruction_master_translator:uav_readdata
	wire          nios_ii_processor_instruction_master_translator_avalon_universal_master_0_debugaccess;   // NIOS_II_Processor_instruction_master_translator:uav_debugaccess -> NIOS_II_Processor_instruction_master_agent:av_debugaccess
	wire   [18:0] nios_ii_processor_instruction_master_translator_avalon_universal_master_0_address;       // NIOS_II_Processor_instruction_master_translator:uav_address -> NIOS_II_Processor_instruction_master_agent:av_address
	wire          nios_ii_processor_instruction_master_translator_avalon_universal_master_0_read;          // NIOS_II_Processor_instruction_master_translator:uav_read -> NIOS_II_Processor_instruction_master_agent:av_read
	wire    [3:0] nios_ii_processor_instruction_master_translator_avalon_universal_master_0_byteenable;    // NIOS_II_Processor_instruction_master_translator:uav_byteenable -> NIOS_II_Processor_instruction_master_agent:av_byteenable
	wire          nios_ii_processor_instruction_master_translator_avalon_universal_master_0_readdatavalid; // NIOS_II_Processor_instruction_master_agent:av_readdatavalid -> NIOS_II_Processor_instruction_master_translator:uav_readdatavalid
	wire          nios_ii_processor_instruction_master_translator_avalon_universal_master_0_lock;          // NIOS_II_Processor_instruction_master_translator:uav_lock -> NIOS_II_Processor_instruction_master_agent:av_lock
	wire          nios_ii_processor_instruction_master_translator_avalon_universal_master_0_write;         // NIOS_II_Processor_instruction_master_translator:uav_write -> NIOS_II_Processor_instruction_master_agent:av_write
	wire   [31:0] nios_ii_processor_instruction_master_translator_avalon_universal_master_0_writedata;     // NIOS_II_Processor_instruction_master_translator:uav_writedata -> NIOS_II_Processor_instruction_master_agent:av_writedata
	wire    [2:0] nios_ii_processor_instruction_master_translator_avalon_universal_master_0_burstcount;    // NIOS_II_Processor_instruction_master_translator:uav_burstcount -> NIOS_II_Processor_instruction_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                                   // rsp_mux_001:src_valid -> NIOS_II_Processor_instruction_master_agent:rp_valid
	wire   [97:0] rsp_mux_001_src_data;                                                                    // rsp_mux_001:src_data -> NIOS_II_Processor_instruction_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                                   // NIOS_II_Processor_instruction_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [11:0] rsp_mux_001_src_channel;                                                                 // rsp_mux_001:src_channel -> NIOS_II_Processor_instruction_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                           // rsp_mux_001:src_startofpacket -> NIOS_II_Processor_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                             // rsp_mux_001:src_endofpacket -> NIOS_II_Processor_instruction_master_agent:rp_endofpacket
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                           // JTAG_UART_avalon_jtag_slave_translator:uav_readdata -> JTAG_UART_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                        // JTAG_UART_avalon_jtag_slave_translator:uav_waitrequest -> JTAG_UART_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                        // JTAG_UART_avalon_jtag_slave_agent:m0_debugaccess -> JTAG_UART_avalon_jtag_slave_translator:uav_debugaccess
	wire   [18:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                            // JTAG_UART_avalon_jtag_slave_agent:m0_address -> JTAG_UART_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                         // JTAG_UART_avalon_jtag_slave_agent:m0_byteenable -> JTAG_UART_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                               // JTAG_UART_avalon_jtag_slave_agent:m0_read -> JTAG_UART_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                                      // JTAG_UART_avalon_jtag_slave_translator:uav_readdatavalid -> JTAG_UART_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                               // JTAG_UART_avalon_jtag_slave_agent:m0_lock -> JTAG_UART_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                          // JTAG_UART_avalon_jtag_slave_agent:m0_writedata -> JTAG_UART_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                              // JTAG_UART_avalon_jtag_slave_agent:m0_write -> JTAG_UART_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                         // JTAG_UART_avalon_jtag_slave_agent:m0_burstcount -> JTAG_UART_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                       // JTAG_UART_avalon_jtag_slave_agent:rf_source_valid -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire   [98:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                        // JTAG_UART_avalon_jtag_slave_agent:rf_source_data -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                       // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_ready -> JTAG_UART_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                               // JTAG_UART_avalon_jtag_slave_agent:rf_source_startofpacket -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                                 // JTAG_UART_avalon_jtag_slave_agent:rf_source_endofpacket -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                    // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_valid -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_valid
	wire   [98:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                                     // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_data -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                    // JTAG_UART_avalon_jtag_slave_agent:rf_sink_ready -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                            // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                              // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                                       // cmd_mux:src_valid -> JTAG_UART_avalon_jtag_slave_agent:cp_valid
	wire   [97:0] cmd_mux_src_data;                                                                        // cmd_mux:src_data -> JTAG_UART_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                                       // JTAG_UART_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [11:0] cmd_mux_src_channel;                                                                     // cmd_mux:src_channel -> JTAG_UART_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                               // cmd_mux:src_startofpacket -> JTAG_UART_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                 // cmd_mux:src_endofpacket -> JTAG_UART_avalon_jtag_slave_agent:cp_endofpacket
	wire    [7:0] lcd_avalon_lcd_slave_agent_m0_readdata;                                                  // LCD_avalon_lcd_slave_translator:uav_readdata -> LCD_avalon_lcd_slave_agent:m0_readdata
	wire          lcd_avalon_lcd_slave_agent_m0_waitrequest;                                               // LCD_avalon_lcd_slave_translator:uav_waitrequest -> LCD_avalon_lcd_slave_agent:m0_waitrequest
	wire          lcd_avalon_lcd_slave_agent_m0_debugaccess;                                               // LCD_avalon_lcd_slave_agent:m0_debugaccess -> LCD_avalon_lcd_slave_translator:uav_debugaccess
	wire   [18:0] lcd_avalon_lcd_slave_agent_m0_address;                                                   // LCD_avalon_lcd_slave_agent:m0_address -> LCD_avalon_lcd_slave_translator:uav_address
	wire    [0:0] lcd_avalon_lcd_slave_agent_m0_byteenable;                                                // LCD_avalon_lcd_slave_agent:m0_byteenable -> LCD_avalon_lcd_slave_translator:uav_byteenable
	wire          lcd_avalon_lcd_slave_agent_m0_read;                                                      // LCD_avalon_lcd_slave_agent:m0_read -> LCD_avalon_lcd_slave_translator:uav_read
	wire          lcd_avalon_lcd_slave_agent_m0_readdatavalid;                                             // LCD_avalon_lcd_slave_translator:uav_readdatavalid -> LCD_avalon_lcd_slave_agent:m0_readdatavalid
	wire          lcd_avalon_lcd_slave_agent_m0_lock;                                                      // LCD_avalon_lcd_slave_agent:m0_lock -> LCD_avalon_lcd_slave_translator:uav_lock
	wire    [7:0] lcd_avalon_lcd_slave_agent_m0_writedata;                                                 // LCD_avalon_lcd_slave_agent:m0_writedata -> LCD_avalon_lcd_slave_translator:uav_writedata
	wire          lcd_avalon_lcd_slave_agent_m0_write;                                                     // LCD_avalon_lcd_slave_agent:m0_write -> LCD_avalon_lcd_slave_translator:uav_write
	wire    [0:0] lcd_avalon_lcd_slave_agent_m0_burstcount;                                                // LCD_avalon_lcd_slave_agent:m0_burstcount -> LCD_avalon_lcd_slave_translator:uav_burstcount
	wire          lcd_avalon_lcd_slave_agent_rf_source_valid;                                              // LCD_avalon_lcd_slave_agent:rf_source_valid -> LCD_avalon_lcd_slave_agent_rsp_fifo:in_valid
	wire   [71:0] lcd_avalon_lcd_slave_agent_rf_source_data;                                               // LCD_avalon_lcd_slave_agent:rf_source_data -> LCD_avalon_lcd_slave_agent_rsp_fifo:in_data
	wire          lcd_avalon_lcd_slave_agent_rf_source_ready;                                              // LCD_avalon_lcd_slave_agent_rsp_fifo:in_ready -> LCD_avalon_lcd_slave_agent:rf_source_ready
	wire          lcd_avalon_lcd_slave_agent_rf_source_startofpacket;                                      // LCD_avalon_lcd_slave_agent:rf_source_startofpacket -> LCD_avalon_lcd_slave_agent_rsp_fifo:in_startofpacket
	wire          lcd_avalon_lcd_slave_agent_rf_source_endofpacket;                                        // LCD_avalon_lcd_slave_agent:rf_source_endofpacket -> LCD_avalon_lcd_slave_agent_rsp_fifo:in_endofpacket
	wire          lcd_avalon_lcd_slave_agent_rsp_fifo_out_valid;                                           // LCD_avalon_lcd_slave_agent_rsp_fifo:out_valid -> LCD_avalon_lcd_slave_agent:rf_sink_valid
	wire   [71:0] lcd_avalon_lcd_slave_agent_rsp_fifo_out_data;                                            // LCD_avalon_lcd_slave_agent_rsp_fifo:out_data -> LCD_avalon_lcd_slave_agent:rf_sink_data
	wire          lcd_avalon_lcd_slave_agent_rsp_fifo_out_ready;                                           // LCD_avalon_lcd_slave_agent:rf_sink_ready -> LCD_avalon_lcd_slave_agent_rsp_fifo:out_ready
	wire          lcd_avalon_lcd_slave_agent_rsp_fifo_out_startofpacket;                                   // LCD_avalon_lcd_slave_agent_rsp_fifo:out_startofpacket -> LCD_avalon_lcd_slave_agent:rf_sink_startofpacket
	wire          lcd_avalon_lcd_slave_agent_rsp_fifo_out_endofpacket;                                     // LCD_avalon_lcd_slave_agent_rsp_fifo:out_endofpacket -> LCD_avalon_lcd_slave_agent:rf_sink_endofpacket
	wire   [31:0] sw_sliders_avalon_parallel_port_slave_agent_m0_readdata;                                 // SW_SLIDERS_avalon_parallel_port_slave_translator:uav_readdata -> SW_SLIDERS_avalon_parallel_port_slave_agent:m0_readdata
	wire          sw_sliders_avalon_parallel_port_slave_agent_m0_waitrequest;                              // SW_SLIDERS_avalon_parallel_port_slave_translator:uav_waitrequest -> SW_SLIDERS_avalon_parallel_port_slave_agent:m0_waitrequest
	wire          sw_sliders_avalon_parallel_port_slave_agent_m0_debugaccess;                              // SW_SLIDERS_avalon_parallel_port_slave_agent:m0_debugaccess -> SW_SLIDERS_avalon_parallel_port_slave_translator:uav_debugaccess
	wire   [18:0] sw_sliders_avalon_parallel_port_slave_agent_m0_address;                                  // SW_SLIDERS_avalon_parallel_port_slave_agent:m0_address -> SW_SLIDERS_avalon_parallel_port_slave_translator:uav_address
	wire    [3:0] sw_sliders_avalon_parallel_port_slave_agent_m0_byteenable;                               // SW_SLIDERS_avalon_parallel_port_slave_agent:m0_byteenable -> SW_SLIDERS_avalon_parallel_port_slave_translator:uav_byteenable
	wire          sw_sliders_avalon_parallel_port_slave_agent_m0_read;                                     // SW_SLIDERS_avalon_parallel_port_slave_agent:m0_read -> SW_SLIDERS_avalon_parallel_port_slave_translator:uav_read
	wire          sw_sliders_avalon_parallel_port_slave_agent_m0_readdatavalid;                            // SW_SLIDERS_avalon_parallel_port_slave_translator:uav_readdatavalid -> SW_SLIDERS_avalon_parallel_port_slave_agent:m0_readdatavalid
	wire          sw_sliders_avalon_parallel_port_slave_agent_m0_lock;                                     // SW_SLIDERS_avalon_parallel_port_slave_agent:m0_lock -> SW_SLIDERS_avalon_parallel_port_slave_translator:uav_lock
	wire   [31:0] sw_sliders_avalon_parallel_port_slave_agent_m0_writedata;                                // SW_SLIDERS_avalon_parallel_port_slave_agent:m0_writedata -> SW_SLIDERS_avalon_parallel_port_slave_translator:uav_writedata
	wire          sw_sliders_avalon_parallel_port_slave_agent_m0_write;                                    // SW_SLIDERS_avalon_parallel_port_slave_agent:m0_write -> SW_SLIDERS_avalon_parallel_port_slave_translator:uav_write
	wire    [2:0] sw_sliders_avalon_parallel_port_slave_agent_m0_burstcount;                               // SW_SLIDERS_avalon_parallel_port_slave_agent:m0_burstcount -> SW_SLIDERS_avalon_parallel_port_slave_translator:uav_burstcount
	wire          sw_sliders_avalon_parallel_port_slave_agent_rf_source_valid;                             // SW_SLIDERS_avalon_parallel_port_slave_agent:rf_source_valid -> SW_SLIDERS_avalon_parallel_port_slave_agent_rsp_fifo:in_valid
	wire   [98:0] sw_sliders_avalon_parallel_port_slave_agent_rf_source_data;                              // SW_SLIDERS_avalon_parallel_port_slave_agent:rf_source_data -> SW_SLIDERS_avalon_parallel_port_slave_agent_rsp_fifo:in_data
	wire          sw_sliders_avalon_parallel_port_slave_agent_rf_source_ready;                             // SW_SLIDERS_avalon_parallel_port_slave_agent_rsp_fifo:in_ready -> SW_SLIDERS_avalon_parallel_port_slave_agent:rf_source_ready
	wire          sw_sliders_avalon_parallel_port_slave_agent_rf_source_startofpacket;                     // SW_SLIDERS_avalon_parallel_port_slave_agent:rf_source_startofpacket -> SW_SLIDERS_avalon_parallel_port_slave_agent_rsp_fifo:in_startofpacket
	wire          sw_sliders_avalon_parallel_port_slave_agent_rf_source_endofpacket;                       // SW_SLIDERS_avalon_parallel_port_slave_agent:rf_source_endofpacket -> SW_SLIDERS_avalon_parallel_port_slave_agent_rsp_fifo:in_endofpacket
	wire          sw_sliders_avalon_parallel_port_slave_agent_rsp_fifo_out_valid;                          // SW_SLIDERS_avalon_parallel_port_slave_agent_rsp_fifo:out_valid -> SW_SLIDERS_avalon_parallel_port_slave_agent:rf_sink_valid
	wire   [98:0] sw_sliders_avalon_parallel_port_slave_agent_rsp_fifo_out_data;                           // SW_SLIDERS_avalon_parallel_port_slave_agent_rsp_fifo:out_data -> SW_SLIDERS_avalon_parallel_port_slave_agent:rf_sink_data
	wire          sw_sliders_avalon_parallel_port_slave_agent_rsp_fifo_out_ready;                          // SW_SLIDERS_avalon_parallel_port_slave_agent:rf_sink_ready -> SW_SLIDERS_avalon_parallel_port_slave_agent_rsp_fifo:out_ready
	wire          sw_sliders_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket;                  // SW_SLIDERS_avalon_parallel_port_slave_agent_rsp_fifo:out_startofpacket -> SW_SLIDERS_avalon_parallel_port_slave_agent:rf_sink_startofpacket
	wire          sw_sliders_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket;                    // SW_SLIDERS_avalon_parallel_port_slave_agent_rsp_fifo:out_endofpacket -> SW_SLIDERS_avalon_parallel_port_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                                   // cmd_mux_002:src_valid -> SW_SLIDERS_avalon_parallel_port_slave_agent:cp_valid
	wire   [97:0] cmd_mux_002_src_data;                                                                    // cmd_mux_002:src_data -> SW_SLIDERS_avalon_parallel_port_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                                   // SW_SLIDERS_avalon_parallel_port_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [11:0] cmd_mux_002_src_channel;                                                                 // cmd_mux_002:src_channel -> SW_SLIDERS_avalon_parallel_port_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                           // cmd_mux_002:src_startofpacket -> SW_SLIDERS_avalon_parallel_port_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                             // cmd_mux_002:src_endofpacket -> SW_SLIDERS_avalon_parallel_port_slave_agent:cp_endofpacket
	wire   [31:0] leds_green_avalon_parallel_port_slave_agent_m0_readdata;                                 // LEDS_GREEN_avalon_parallel_port_slave_translator:uav_readdata -> LEDS_GREEN_avalon_parallel_port_slave_agent:m0_readdata
	wire          leds_green_avalon_parallel_port_slave_agent_m0_waitrequest;                              // LEDS_GREEN_avalon_parallel_port_slave_translator:uav_waitrequest -> LEDS_GREEN_avalon_parallel_port_slave_agent:m0_waitrequest
	wire          leds_green_avalon_parallel_port_slave_agent_m0_debugaccess;                              // LEDS_GREEN_avalon_parallel_port_slave_agent:m0_debugaccess -> LEDS_GREEN_avalon_parallel_port_slave_translator:uav_debugaccess
	wire   [18:0] leds_green_avalon_parallel_port_slave_agent_m0_address;                                  // LEDS_GREEN_avalon_parallel_port_slave_agent:m0_address -> LEDS_GREEN_avalon_parallel_port_slave_translator:uav_address
	wire    [3:0] leds_green_avalon_parallel_port_slave_agent_m0_byteenable;                               // LEDS_GREEN_avalon_parallel_port_slave_agent:m0_byteenable -> LEDS_GREEN_avalon_parallel_port_slave_translator:uav_byteenable
	wire          leds_green_avalon_parallel_port_slave_agent_m0_read;                                     // LEDS_GREEN_avalon_parallel_port_slave_agent:m0_read -> LEDS_GREEN_avalon_parallel_port_slave_translator:uav_read
	wire          leds_green_avalon_parallel_port_slave_agent_m0_readdatavalid;                            // LEDS_GREEN_avalon_parallel_port_slave_translator:uav_readdatavalid -> LEDS_GREEN_avalon_parallel_port_slave_agent:m0_readdatavalid
	wire          leds_green_avalon_parallel_port_slave_agent_m0_lock;                                     // LEDS_GREEN_avalon_parallel_port_slave_agent:m0_lock -> LEDS_GREEN_avalon_parallel_port_slave_translator:uav_lock
	wire   [31:0] leds_green_avalon_parallel_port_slave_agent_m0_writedata;                                // LEDS_GREEN_avalon_parallel_port_slave_agent:m0_writedata -> LEDS_GREEN_avalon_parallel_port_slave_translator:uav_writedata
	wire          leds_green_avalon_parallel_port_slave_agent_m0_write;                                    // LEDS_GREEN_avalon_parallel_port_slave_agent:m0_write -> LEDS_GREEN_avalon_parallel_port_slave_translator:uav_write
	wire    [2:0] leds_green_avalon_parallel_port_slave_agent_m0_burstcount;                               // LEDS_GREEN_avalon_parallel_port_slave_agent:m0_burstcount -> LEDS_GREEN_avalon_parallel_port_slave_translator:uav_burstcount
	wire          leds_green_avalon_parallel_port_slave_agent_rf_source_valid;                             // LEDS_GREEN_avalon_parallel_port_slave_agent:rf_source_valid -> LEDS_GREEN_avalon_parallel_port_slave_agent_rsp_fifo:in_valid
	wire   [98:0] leds_green_avalon_parallel_port_slave_agent_rf_source_data;                              // LEDS_GREEN_avalon_parallel_port_slave_agent:rf_source_data -> LEDS_GREEN_avalon_parallel_port_slave_agent_rsp_fifo:in_data
	wire          leds_green_avalon_parallel_port_slave_agent_rf_source_ready;                             // LEDS_GREEN_avalon_parallel_port_slave_agent_rsp_fifo:in_ready -> LEDS_GREEN_avalon_parallel_port_slave_agent:rf_source_ready
	wire          leds_green_avalon_parallel_port_slave_agent_rf_source_startofpacket;                     // LEDS_GREEN_avalon_parallel_port_slave_agent:rf_source_startofpacket -> LEDS_GREEN_avalon_parallel_port_slave_agent_rsp_fifo:in_startofpacket
	wire          leds_green_avalon_parallel_port_slave_agent_rf_source_endofpacket;                       // LEDS_GREEN_avalon_parallel_port_slave_agent:rf_source_endofpacket -> LEDS_GREEN_avalon_parallel_port_slave_agent_rsp_fifo:in_endofpacket
	wire          leds_green_avalon_parallel_port_slave_agent_rsp_fifo_out_valid;                          // LEDS_GREEN_avalon_parallel_port_slave_agent_rsp_fifo:out_valid -> LEDS_GREEN_avalon_parallel_port_slave_agent:rf_sink_valid
	wire   [98:0] leds_green_avalon_parallel_port_slave_agent_rsp_fifo_out_data;                           // LEDS_GREEN_avalon_parallel_port_slave_agent_rsp_fifo:out_data -> LEDS_GREEN_avalon_parallel_port_slave_agent:rf_sink_data
	wire          leds_green_avalon_parallel_port_slave_agent_rsp_fifo_out_ready;                          // LEDS_GREEN_avalon_parallel_port_slave_agent:rf_sink_ready -> LEDS_GREEN_avalon_parallel_port_slave_agent_rsp_fifo:out_ready
	wire          leds_green_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket;                  // LEDS_GREEN_avalon_parallel_port_slave_agent_rsp_fifo:out_startofpacket -> LEDS_GREEN_avalon_parallel_port_slave_agent:rf_sink_startofpacket
	wire          leds_green_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket;                    // LEDS_GREEN_avalon_parallel_port_slave_agent_rsp_fifo:out_endofpacket -> LEDS_GREEN_avalon_parallel_port_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                                   // cmd_mux_003:src_valid -> LEDS_GREEN_avalon_parallel_port_slave_agent:cp_valid
	wire   [97:0] cmd_mux_003_src_data;                                                                    // cmd_mux_003:src_data -> LEDS_GREEN_avalon_parallel_port_slave_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                                   // LEDS_GREEN_avalon_parallel_port_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [11:0] cmd_mux_003_src_channel;                                                                 // cmd_mux_003:src_channel -> LEDS_GREEN_avalon_parallel_port_slave_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                           // cmd_mux_003:src_startofpacket -> LEDS_GREEN_avalon_parallel_port_slave_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                             // cmd_mux_003:src_endofpacket -> LEDS_GREEN_avalon_parallel_port_slave_agent:cp_endofpacket
	wire   [31:0] leds_red_avalon_parallel_port_slave_agent_m0_readdata;                                   // LEDS_RED_avalon_parallel_port_slave_translator:uav_readdata -> LEDS_RED_avalon_parallel_port_slave_agent:m0_readdata
	wire          leds_red_avalon_parallel_port_slave_agent_m0_waitrequest;                                // LEDS_RED_avalon_parallel_port_slave_translator:uav_waitrequest -> LEDS_RED_avalon_parallel_port_slave_agent:m0_waitrequest
	wire          leds_red_avalon_parallel_port_slave_agent_m0_debugaccess;                                // LEDS_RED_avalon_parallel_port_slave_agent:m0_debugaccess -> LEDS_RED_avalon_parallel_port_slave_translator:uav_debugaccess
	wire   [18:0] leds_red_avalon_parallel_port_slave_agent_m0_address;                                    // LEDS_RED_avalon_parallel_port_slave_agent:m0_address -> LEDS_RED_avalon_parallel_port_slave_translator:uav_address
	wire    [3:0] leds_red_avalon_parallel_port_slave_agent_m0_byteenable;                                 // LEDS_RED_avalon_parallel_port_slave_agent:m0_byteenable -> LEDS_RED_avalon_parallel_port_slave_translator:uav_byteenable
	wire          leds_red_avalon_parallel_port_slave_agent_m0_read;                                       // LEDS_RED_avalon_parallel_port_slave_agent:m0_read -> LEDS_RED_avalon_parallel_port_slave_translator:uav_read
	wire          leds_red_avalon_parallel_port_slave_agent_m0_readdatavalid;                              // LEDS_RED_avalon_parallel_port_slave_translator:uav_readdatavalid -> LEDS_RED_avalon_parallel_port_slave_agent:m0_readdatavalid
	wire          leds_red_avalon_parallel_port_slave_agent_m0_lock;                                       // LEDS_RED_avalon_parallel_port_slave_agent:m0_lock -> LEDS_RED_avalon_parallel_port_slave_translator:uav_lock
	wire   [31:0] leds_red_avalon_parallel_port_slave_agent_m0_writedata;                                  // LEDS_RED_avalon_parallel_port_slave_agent:m0_writedata -> LEDS_RED_avalon_parallel_port_slave_translator:uav_writedata
	wire          leds_red_avalon_parallel_port_slave_agent_m0_write;                                      // LEDS_RED_avalon_parallel_port_slave_agent:m0_write -> LEDS_RED_avalon_parallel_port_slave_translator:uav_write
	wire    [2:0] leds_red_avalon_parallel_port_slave_agent_m0_burstcount;                                 // LEDS_RED_avalon_parallel_port_slave_agent:m0_burstcount -> LEDS_RED_avalon_parallel_port_slave_translator:uav_burstcount
	wire          leds_red_avalon_parallel_port_slave_agent_rf_source_valid;                               // LEDS_RED_avalon_parallel_port_slave_agent:rf_source_valid -> LEDS_RED_avalon_parallel_port_slave_agent_rsp_fifo:in_valid
	wire   [98:0] leds_red_avalon_parallel_port_slave_agent_rf_source_data;                                // LEDS_RED_avalon_parallel_port_slave_agent:rf_source_data -> LEDS_RED_avalon_parallel_port_slave_agent_rsp_fifo:in_data
	wire          leds_red_avalon_parallel_port_slave_agent_rf_source_ready;                               // LEDS_RED_avalon_parallel_port_slave_agent_rsp_fifo:in_ready -> LEDS_RED_avalon_parallel_port_slave_agent:rf_source_ready
	wire          leds_red_avalon_parallel_port_slave_agent_rf_source_startofpacket;                       // LEDS_RED_avalon_parallel_port_slave_agent:rf_source_startofpacket -> LEDS_RED_avalon_parallel_port_slave_agent_rsp_fifo:in_startofpacket
	wire          leds_red_avalon_parallel_port_slave_agent_rf_source_endofpacket;                         // LEDS_RED_avalon_parallel_port_slave_agent:rf_source_endofpacket -> LEDS_RED_avalon_parallel_port_slave_agent_rsp_fifo:in_endofpacket
	wire          leds_red_avalon_parallel_port_slave_agent_rsp_fifo_out_valid;                            // LEDS_RED_avalon_parallel_port_slave_agent_rsp_fifo:out_valid -> LEDS_RED_avalon_parallel_port_slave_agent:rf_sink_valid
	wire   [98:0] leds_red_avalon_parallel_port_slave_agent_rsp_fifo_out_data;                             // LEDS_RED_avalon_parallel_port_slave_agent_rsp_fifo:out_data -> LEDS_RED_avalon_parallel_port_slave_agent:rf_sink_data
	wire          leds_red_avalon_parallel_port_slave_agent_rsp_fifo_out_ready;                            // LEDS_RED_avalon_parallel_port_slave_agent:rf_sink_ready -> LEDS_RED_avalon_parallel_port_slave_agent_rsp_fifo:out_ready
	wire          leds_red_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket;                    // LEDS_RED_avalon_parallel_port_slave_agent_rsp_fifo:out_startofpacket -> LEDS_RED_avalon_parallel_port_slave_agent:rf_sink_startofpacket
	wire          leds_red_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket;                      // LEDS_RED_avalon_parallel_port_slave_agent_rsp_fifo:out_endofpacket -> LEDS_RED_avalon_parallel_port_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                                   // cmd_mux_004:src_valid -> LEDS_RED_avalon_parallel_port_slave_agent:cp_valid
	wire   [97:0] cmd_mux_004_src_data;                                                                    // cmd_mux_004:src_data -> LEDS_RED_avalon_parallel_port_slave_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                                   // LEDS_RED_avalon_parallel_port_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [11:0] cmd_mux_004_src_channel;                                                                 // cmd_mux_004:src_channel -> LEDS_RED_avalon_parallel_port_slave_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                           // cmd_mux_004:src_startofpacket -> LEDS_RED_avalon_parallel_port_slave_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                             // cmd_mux_004:src_endofpacket -> LEDS_RED_avalon_parallel_port_slave_agent:cp_endofpacket
	wire   [31:0] hex_3_avalon_parallel_port_slave_agent_m0_readdata;                                      // HEX_3_avalon_parallel_port_slave_translator:uav_readdata -> HEX_3_avalon_parallel_port_slave_agent:m0_readdata
	wire          hex_3_avalon_parallel_port_slave_agent_m0_waitrequest;                                   // HEX_3_avalon_parallel_port_slave_translator:uav_waitrequest -> HEX_3_avalon_parallel_port_slave_agent:m0_waitrequest
	wire          hex_3_avalon_parallel_port_slave_agent_m0_debugaccess;                                   // HEX_3_avalon_parallel_port_slave_agent:m0_debugaccess -> HEX_3_avalon_parallel_port_slave_translator:uav_debugaccess
	wire   [18:0] hex_3_avalon_parallel_port_slave_agent_m0_address;                                       // HEX_3_avalon_parallel_port_slave_agent:m0_address -> HEX_3_avalon_parallel_port_slave_translator:uav_address
	wire    [3:0] hex_3_avalon_parallel_port_slave_agent_m0_byteenable;                                    // HEX_3_avalon_parallel_port_slave_agent:m0_byteenable -> HEX_3_avalon_parallel_port_slave_translator:uav_byteenable
	wire          hex_3_avalon_parallel_port_slave_agent_m0_read;                                          // HEX_3_avalon_parallel_port_slave_agent:m0_read -> HEX_3_avalon_parallel_port_slave_translator:uav_read
	wire          hex_3_avalon_parallel_port_slave_agent_m0_readdatavalid;                                 // HEX_3_avalon_parallel_port_slave_translator:uav_readdatavalid -> HEX_3_avalon_parallel_port_slave_agent:m0_readdatavalid
	wire          hex_3_avalon_parallel_port_slave_agent_m0_lock;                                          // HEX_3_avalon_parallel_port_slave_agent:m0_lock -> HEX_3_avalon_parallel_port_slave_translator:uav_lock
	wire   [31:0] hex_3_avalon_parallel_port_slave_agent_m0_writedata;                                     // HEX_3_avalon_parallel_port_slave_agent:m0_writedata -> HEX_3_avalon_parallel_port_slave_translator:uav_writedata
	wire          hex_3_avalon_parallel_port_slave_agent_m0_write;                                         // HEX_3_avalon_parallel_port_slave_agent:m0_write -> HEX_3_avalon_parallel_port_slave_translator:uav_write
	wire    [2:0] hex_3_avalon_parallel_port_slave_agent_m0_burstcount;                                    // HEX_3_avalon_parallel_port_slave_agent:m0_burstcount -> HEX_3_avalon_parallel_port_slave_translator:uav_burstcount
	wire          hex_3_avalon_parallel_port_slave_agent_rf_source_valid;                                  // HEX_3_avalon_parallel_port_slave_agent:rf_source_valid -> HEX_3_avalon_parallel_port_slave_agent_rsp_fifo:in_valid
	wire   [98:0] hex_3_avalon_parallel_port_slave_agent_rf_source_data;                                   // HEX_3_avalon_parallel_port_slave_agent:rf_source_data -> HEX_3_avalon_parallel_port_slave_agent_rsp_fifo:in_data
	wire          hex_3_avalon_parallel_port_slave_agent_rf_source_ready;                                  // HEX_3_avalon_parallel_port_slave_agent_rsp_fifo:in_ready -> HEX_3_avalon_parallel_port_slave_agent:rf_source_ready
	wire          hex_3_avalon_parallel_port_slave_agent_rf_source_startofpacket;                          // HEX_3_avalon_parallel_port_slave_agent:rf_source_startofpacket -> HEX_3_avalon_parallel_port_slave_agent_rsp_fifo:in_startofpacket
	wire          hex_3_avalon_parallel_port_slave_agent_rf_source_endofpacket;                            // HEX_3_avalon_parallel_port_slave_agent:rf_source_endofpacket -> HEX_3_avalon_parallel_port_slave_agent_rsp_fifo:in_endofpacket
	wire          hex_3_avalon_parallel_port_slave_agent_rsp_fifo_out_valid;                               // HEX_3_avalon_parallel_port_slave_agent_rsp_fifo:out_valid -> HEX_3_avalon_parallel_port_slave_agent:rf_sink_valid
	wire   [98:0] hex_3_avalon_parallel_port_slave_agent_rsp_fifo_out_data;                                // HEX_3_avalon_parallel_port_slave_agent_rsp_fifo:out_data -> HEX_3_avalon_parallel_port_slave_agent:rf_sink_data
	wire          hex_3_avalon_parallel_port_slave_agent_rsp_fifo_out_ready;                               // HEX_3_avalon_parallel_port_slave_agent:rf_sink_ready -> HEX_3_avalon_parallel_port_slave_agent_rsp_fifo:out_ready
	wire          hex_3_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket;                       // HEX_3_avalon_parallel_port_slave_agent_rsp_fifo:out_startofpacket -> HEX_3_avalon_parallel_port_slave_agent:rf_sink_startofpacket
	wire          hex_3_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket;                         // HEX_3_avalon_parallel_port_slave_agent_rsp_fifo:out_endofpacket -> HEX_3_avalon_parallel_port_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                                   // cmd_mux_005:src_valid -> HEX_3_avalon_parallel_port_slave_agent:cp_valid
	wire   [97:0] cmd_mux_005_src_data;                                                                    // cmd_mux_005:src_data -> HEX_3_avalon_parallel_port_slave_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                                   // HEX_3_avalon_parallel_port_slave_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [11:0] cmd_mux_005_src_channel;                                                                 // cmd_mux_005:src_channel -> HEX_3_avalon_parallel_port_slave_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                           // cmd_mux_005:src_startofpacket -> HEX_3_avalon_parallel_port_slave_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                             // cmd_mux_005:src_endofpacket -> HEX_3_avalon_parallel_port_slave_agent:cp_endofpacket
	wire   [31:0] hex_7_avalon_parallel_port_slave_agent_m0_readdata;                                      // HEX_7_avalon_parallel_port_slave_translator:uav_readdata -> HEX_7_avalon_parallel_port_slave_agent:m0_readdata
	wire          hex_7_avalon_parallel_port_slave_agent_m0_waitrequest;                                   // HEX_7_avalon_parallel_port_slave_translator:uav_waitrequest -> HEX_7_avalon_parallel_port_slave_agent:m0_waitrequest
	wire          hex_7_avalon_parallel_port_slave_agent_m0_debugaccess;                                   // HEX_7_avalon_parallel_port_slave_agent:m0_debugaccess -> HEX_7_avalon_parallel_port_slave_translator:uav_debugaccess
	wire   [18:0] hex_7_avalon_parallel_port_slave_agent_m0_address;                                       // HEX_7_avalon_parallel_port_slave_agent:m0_address -> HEX_7_avalon_parallel_port_slave_translator:uav_address
	wire    [3:0] hex_7_avalon_parallel_port_slave_agent_m0_byteenable;                                    // HEX_7_avalon_parallel_port_slave_agent:m0_byteenable -> HEX_7_avalon_parallel_port_slave_translator:uav_byteenable
	wire          hex_7_avalon_parallel_port_slave_agent_m0_read;                                          // HEX_7_avalon_parallel_port_slave_agent:m0_read -> HEX_7_avalon_parallel_port_slave_translator:uav_read
	wire          hex_7_avalon_parallel_port_slave_agent_m0_readdatavalid;                                 // HEX_7_avalon_parallel_port_slave_translator:uav_readdatavalid -> HEX_7_avalon_parallel_port_slave_agent:m0_readdatavalid
	wire          hex_7_avalon_parallel_port_slave_agent_m0_lock;                                          // HEX_7_avalon_parallel_port_slave_agent:m0_lock -> HEX_7_avalon_parallel_port_slave_translator:uav_lock
	wire   [31:0] hex_7_avalon_parallel_port_slave_agent_m0_writedata;                                     // HEX_7_avalon_parallel_port_slave_agent:m0_writedata -> HEX_7_avalon_parallel_port_slave_translator:uav_writedata
	wire          hex_7_avalon_parallel_port_slave_agent_m0_write;                                         // HEX_7_avalon_parallel_port_slave_agent:m0_write -> HEX_7_avalon_parallel_port_slave_translator:uav_write
	wire    [2:0] hex_7_avalon_parallel_port_slave_agent_m0_burstcount;                                    // HEX_7_avalon_parallel_port_slave_agent:m0_burstcount -> HEX_7_avalon_parallel_port_slave_translator:uav_burstcount
	wire          hex_7_avalon_parallel_port_slave_agent_rf_source_valid;                                  // HEX_7_avalon_parallel_port_slave_agent:rf_source_valid -> HEX_7_avalon_parallel_port_slave_agent_rsp_fifo:in_valid
	wire   [98:0] hex_7_avalon_parallel_port_slave_agent_rf_source_data;                                   // HEX_7_avalon_parallel_port_slave_agent:rf_source_data -> HEX_7_avalon_parallel_port_slave_agent_rsp_fifo:in_data
	wire          hex_7_avalon_parallel_port_slave_agent_rf_source_ready;                                  // HEX_7_avalon_parallel_port_slave_agent_rsp_fifo:in_ready -> HEX_7_avalon_parallel_port_slave_agent:rf_source_ready
	wire          hex_7_avalon_parallel_port_slave_agent_rf_source_startofpacket;                          // HEX_7_avalon_parallel_port_slave_agent:rf_source_startofpacket -> HEX_7_avalon_parallel_port_slave_agent_rsp_fifo:in_startofpacket
	wire          hex_7_avalon_parallel_port_slave_agent_rf_source_endofpacket;                            // HEX_7_avalon_parallel_port_slave_agent:rf_source_endofpacket -> HEX_7_avalon_parallel_port_slave_agent_rsp_fifo:in_endofpacket
	wire          hex_7_avalon_parallel_port_slave_agent_rsp_fifo_out_valid;                               // HEX_7_avalon_parallel_port_slave_agent_rsp_fifo:out_valid -> HEX_7_avalon_parallel_port_slave_agent:rf_sink_valid
	wire   [98:0] hex_7_avalon_parallel_port_slave_agent_rsp_fifo_out_data;                                // HEX_7_avalon_parallel_port_slave_agent_rsp_fifo:out_data -> HEX_7_avalon_parallel_port_slave_agent:rf_sink_data
	wire          hex_7_avalon_parallel_port_slave_agent_rsp_fifo_out_ready;                               // HEX_7_avalon_parallel_port_slave_agent:rf_sink_ready -> HEX_7_avalon_parallel_port_slave_agent_rsp_fifo:out_ready
	wire          hex_7_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket;                       // HEX_7_avalon_parallel_port_slave_agent_rsp_fifo:out_startofpacket -> HEX_7_avalon_parallel_port_slave_agent:rf_sink_startofpacket
	wire          hex_7_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket;                         // HEX_7_avalon_parallel_port_slave_agent_rsp_fifo:out_endofpacket -> HEX_7_avalon_parallel_port_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                                   // cmd_mux_006:src_valid -> HEX_7_avalon_parallel_port_slave_agent:cp_valid
	wire   [97:0] cmd_mux_006_src_data;                                                                    // cmd_mux_006:src_data -> HEX_7_avalon_parallel_port_slave_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                                   // HEX_7_avalon_parallel_port_slave_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [11:0] cmd_mux_006_src_channel;                                                                 // cmd_mux_006:src_channel -> HEX_7_avalon_parallel_port_slave_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                           // cmd_mux_006:src_startofpacket -> HEX_7_avalon_parallel_port_slave_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                             // cmd_mux_006:src_endofpacket -> HEX_7_avalon_parallel_port_slave_agent:cp_endofpacket
	wire   [31:0] pushbuttons_avalon_parallel_port_slave_agent_m0_readdata;                                // Pushbuttons_avalon_parallel_port_slave_translator:uav_readdata -> Pushbuttons_avalon_parallel_port_slave_agent:m0_readdata
	wire          pushbuttons_avalon_parallel_port_slave_agent_m0_waitrequest;                             // Pushbuttons_avalon_parallel_port_slave_translator:uav_waitrequest -> Pushbuttons_avalon_parallel_port_slave_agent:m0_waitrequest
	wire          pushbuttons_avalon_parallel_port_slave_agent_m0_debugaccess;                             // Pushbuttons_avalon_parallel_port_slave_agent:m0_debugaccess -> Pushbuttons_avalon_parallel_port_slave_translator:uav_debugaccess
	wire   [18:0] pushbuttons_avalon_parallel_port_slave_agent_m0_address;                                 // Pushbuttons_avalon_parallel_port_slave_agent:m0_address -> Pushbuttons_avalon_parallel_port_slave_translator:uav_address
	wire    [3:0] pushbuttons_avalon_parallel_port_slave_agent_m0_byteenable;                              // Pushbuttons_avalon_parallel_port_slave_agent:m0_byteenable -> Pushbuttons_avalon_parallel_port_slave_translator:uav_byteenable
	wire          pushbuttons_avalon_parallel_port_slave_agent_m0_read;                                    // Pushbuttons_avalon_parallel_port_slave_agent:m0_read -> Pushbuttons_avalon_parallel_port_slave_translator:uav_read
	wire          pushbuttons_avalon_parallel_port_slave_agent_m0_readdatavalid;                           // Pushbuttons_avalon_parallel_port_slave_translator:uav_readdatavalid -> Pushbuttons_avalon_parallel_port_slave_agent:m0_readdatavalid
	wire          pushbuttons_avalon_parallel_port_slave_agent_m0_lock;                                    // Pushbuttons_avalon_parallel_port_slave_agent:m0_lock -> Pushbuttons_avalon_parallel_port_slave_translator:uav_lock
	wire   [31:0] pushbuttons_avalon_parallel_port_slave_agent_m0_writedata;                               // Pushbuttons_avalon_parallel_port_slave_agent:m0_writedata -> Pushbuttons_avalon_parallel_port_slave_translator:uav_writedata
	wire          pushbuttons_avalon_parallel_port_slave_agent_m0_write;                                   // Pushbuttons_avalon_parallel_port_slave_agent:m0_write -> Pushbuttons_avalon_parallel_port_slave_translator:uav_write
	wire    [2:0] pushbuttons_avalon_parallel_port_slave_agent_m0_burstcount;                              // Pushbuttons_avalon_parallel_port_slave_agent:m0_burstcount -> Pushbuttons_avalon_parallel_port_slave_translator:uav_burstcount
	wire          pushbuttons_avalon_parallel_port_slave_agent_rf_source_valid;                            // Pushbuttons_avalon_parallel_port_slave_agent:rf_source_valid -> Pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo:in_valid
	wire   [98:0] pushbuttons_avalon_parallel_port_slave_agent_rf_source_data;                             // Pushbuttons_avalon_parallel_port_slave_agent:rf_source_data -> Pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo:in_data
	wire          pushbuttons_avalon_parallel_port_slave_agent_rf_source_ready;                            // Pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo:in_ready -> Pushbuttons_avalon_parallel_port_slave_agent:rf_source_ready
	wire          pushbuttons_avalon_parallel_port_slave_agent_rf_source_startofpacket;                    // Pushbuttons_avalon_parallel_port_slave_agent:rf_source_startofpacket -> Pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo:in_startofpacket
	wire          pushbuttons_avalon_parallel_port_slave_agent_rf_source_endofpacket;                      // Pushbuttons_avalon_parallel_port_slave_agent:rf_source_endofpacket -> Pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo:in_endofpacket
	wire          pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_valid;                         // Pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo:out_valid -> Pushbuttons_avalon_parallel_port_slave_agent:rf_sink_valid
	wire   [98:0] pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_data;                          // Pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo:out_data -> Pushbuttons_avalon_parallel_port_slave_agent:rf_sink_data
	wire          pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_ready;                         // Pushbuttons_avalon_parallel_port_slave_agent:rf_sink_ready -> Pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo:out_ready
	wire          pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket;                 // Pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo:out_startofpacket -> Pushbuttons_avalon_parallel_port_slave_agent:rf_sink_startofpacket
	wire          pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket;                   // Pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo:out_endofpacket -> Pushbuttons_avalon_parallel_port_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                                   // cmd_mux_007:src_valid -> Pushbuttons_avalon_parallel_port_slave_agent:cp_valid
	wire   [97:0] cmd_mux_007_src_data;                                                                    // cmd_mux_007:src_data -> Pushbuttons_avalon_parallel_port_slave_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                                   // Pushbuttons_avalon_parallel_port_slave_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [11:0] cmd_mux_007_src_channel;                                                                 // cmd_mux_007:src_channel -> Pushbuttons_avalon_parallel_port_slave_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                           // cmd_mux_007:src_startofpacket -> Pushbuttons_avalon_parallel_port_slave_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                             // cmd_mux_007:src_endofpacket -> Pushbuttons_avalon_parallel_port_slave_agent:cp_endofpacket
	wire   [31:0] nios_ii_processor_debug_mem_slave_agent_m0_readdata;                                     // NIOS_II_Processor_debug_mem_slave_translator:uav_readdata -> NIOS_II_Processor_debug_mem_slave_agent:m0_readdata
	wire          nios_ii_processor_debug_mem_slave_agent_m0_waitrequest;                                  // NIOS_II_Processor_debug_mem_slave_translator:uav_waitrequest -> NIOS_II_Processor_debug_mem_slave_agent:m0_waitrequest
	wire          nios_ii_processor_debug_mem_slave_agent_m0_debugaccess;                                  // NIOS_II_Processor_debug_mem_slave_agent:m0_debugaccess -> NIOS_II_Processor_debug_mem_slave_translator:uav_debugaccess
	wire   [18:0] nios_ii_processor_debug_mem_slave_agent_m0_address;                                      // NIOS_II_Processor_debug_mem_slave_agent:m0_address -> NIOS_II_Processor_debug_mem_slave_translator:uav_address
	wire    [3:0] nios_ii_processor_debug_mem_slave_agent_m0_byteenable;                                   // NIOS_II_Processor_debug_mem_slave_agent:m0_byteenable -> NIOS_II_Processor_debug_mem_slave_translator:uav_byteenable
	wire          nios_ii_processor_debug_mem_slave_agent_m0_read;                                         // NIOS_II_Processor_debug_mem_slave_agent:m0_read -> NIOS_II_Processor_debug_mem_slave_translator:uav_read
	wire          nios_ii_processor_debug_mem_slave_agent_m0_readdatavalid;                                // NIOS_II_Processor_debug_mem_slave_translator:uav_readdatavalid -> NIOS_II_Processor_debug_mem_slave_agent:m0_readdatavalid
	wire          nios_ii_processor_debug_mem_slave_agent_m0_lock;                                         // NIOS_II_Processor_debug_mem_slave_agent:m0_lock -> NIOS_II_Processor_debug_mem_slave_translator:uav_lock
	wire   [31:0] nios_ii_processor_debug_mem_slave_agent_m0_writedata;                                    // NIOS_II_Processor_debug_mem_slave_agent:m0_writedata -> NIOS_II_Processor_debug_mem_slave_translator:uav_writedata
	wire          nios_ii_processor_debug_mem_slave_agent_m0_write;                                        // NIOS_II_Processor_debug_mem_slave_agent:m0_write -> NIOS_II_Processor_debug_mem_slave_translator:uav_write
	wire    [2:0] nios_ii_processor_debug_mem_slave_agent_m0_burstcount;                                   // NIOS_II_Processor_debug_mem_slave_agent:m0_burstcount -> NIOS_II_Processor_debug_mem_slave_translator:uav_burstcount
	wire          nios_ii_processor_debug_mem_slave_agent_rf_source_valid;                                 // NIOS_II_Processor_debug_mem_slave_agent:rf_source_valid -> NIOS_II_Processor_debug_mem_slave_agent_rsp_fifo:in_valid
	wire   [98:0] nios_ii_processor_debug_mem_slave_agent_rf_source_data;                                  // NIOS_II_Processor_debug_mem_slave_agent:rf_source_data -> NIOS_II_Processor_debug_mem_slave_agent_rsp_fifo:in_data
	wire          nios_ii_processor_debug_mem_slave_agent_rf_source_ready;                                 // NIOS_II_Processor_debug_mem_slave_agent_rsp_fifo:in_ready -> NIOS_II_Processor_debug_mem_slave_agent:rf_source_ready
	wire          nios_ii_processor_debug_mem_slave_agent_rf_source_startofpacket;                         // NIOS_II_Processor_debug_mem_slave_agent:rf_source_startofpacket -> NIOS_II_Processor_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          nios_ii_processor_debug_mem_slave_agent_rf_source_endofpacket;                           // NIOS_II_Processor_debug_mem_slave_agent:rf_source_endofpacket -> NIOS_II_Processor_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_valid;                              // NIOS_II_Processor_debug_mem_slave_agent_rsp_fifo:out_valid -> NIOS_II_Processor_debug_mem_slave_agent:rf_sink_valid
	wire   [98:0] nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_data;                               // NIOS_II_Processor_debug_mem_slave_agent_rsp_fifo:out_data -> NIOS_II_Processor_debug_mem_slave_agent:rf_sink_data
	wire          nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_ready;                              // NIOS_II_Processor_debug_mem_slave_agent:rf_sink_ready -> NIOS_II_Processor_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // NIOS_II_Processor_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> NIOS_II_Processor_debug_mem_slave_agent:rf_sink_startofpacket
	wire          nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // NIOS_II_Processor_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> NIOS_II_Processor_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                                   // cmd_mux_008:src_valid -> NIOS_II_Processor_debug_mem_slave_agent:cp_valid
	wire   [97:0] cmd_mux_008_src_data;                                                                    // cmd_mux_008:src_data -> NIOS_II_Processor_debug_mem_slave_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                                   // NIOS_II_Processor_debug_mem_slave_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [11:0] cmd_mux_008_src_channel;                                                                 // cmd_mux_008:src_channel -> NIOS_II_Processor_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                           // cmd_mux_008:src_startofpacket -> NIOS_II_Processor_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                             // cmd_mux_008:src_endofpacket -> NIOS_II_Processor_debug_mem_slave_agent:cp_endofpacket
	wire   [63:0] onchip_memory_s1_agent_m0_readdata;                                                      // OnChip_Memory_s1_translator:uav_readdata -> OnChip_Memory_s1_agent:m0_readdata
	wire          onchip_memory_s1_agent_m0_waitrequest;                                                   // OnChip_Memory_s1_translator:uav_waitrequest -> OnChip_Memory_s1_agent:m0_waitrequest
	wire          onchip_memory_s1_agent_m0_debugaccess;                                                   // OnChip_Memory_s1_agent:m0_debugaccess -> OnChip_Memory_s1_translator:uav_debugaccess
	wire   [18:0] onchip_memory_s1_agent_m0_address;                                                       // OnChip_Memory_s1_agent:m0_address -> OnChip_Memory_s1_translator:uav_address
	wire    [7:0] onchip_memory_s1_agent_m0_byteenable;                                                    // OnChip_Memory_s1_agent:m0_byteenable -> OnChip_Memory_s1_translator:uav_byteenable
	wire          onchip_memory_s1_agent_m0_read;                                                          // OnChip_Memory_s1_agent:m0_read -> OnChip_Memory_s1_translator:uav_read
	wire          onchip_memory_s1_agent_m0_readdatavalid;                                                 // OnChip_Memory_s1_translator:uav_readdatavalid -> OnChip_Memory_s1_agent:m0_readdatavalid
	wire          onchip_memory_s1_agent_m0_lock;                                                          // OnChip_Memory_s1_agent:m0_lock -> OnChip_Memory_s1_translator:uav_lock
	wire   [63:0] onchip_memory_s1_agent_m0_writedata;                                                     // OnChip_Memory_s1_agent:m0_writedata -> OnChip_Memory_s1_translator:uav_writedata
	wire          onchip_memory_s1_agent_m0_write;                                                         // OnChip_Memory_s1_agent:m0_write -> OnChip_Memory_s1_translator:uav_write
	wire    [3:0] onchip_memory_s1_agent_m0_burstcount;                                                    // OnChip_Memory_s1_agent:m0_burstcount -> OnChip_Memory_s1_translator:uav_burstcount
	wire          onchip_memory_s1_agent_rf_source_valid;                                                  // OnChip_Memory_s1_agent:rf_source_valid -> OnChip_Memory_s1_agent_rsp_fifo:in_valid
	wire  [134:0] onchip_memory_s1_agent_rf_source_data;                                                   // OnChip_Memory_s1_agent:rf_source_data -> OnChip_Memory_s1_agent_rsp_fifo:in_data
	wire          onchip_memory_s1_agent_rf_source_ready;                                                  // OnChip_Memory_s1_agent_rsp_fifo:in_ready -> OnChip_Memory_s1_agent:rf_source_ready
	wire          onchip_memory_s1_agent_rf_source_startofpacket;                                          // OnChip_Memory_s1_agent:rf_source_startofpacket -> OnChip_Memory_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory_s1_agent_rf_source_endofpacket;                                            // OnChip_Memory_s1_agent:rf_source_endofpacket -> OnChip_Memory_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory_s1_agent_rsp_fifo_out_valid;                                               // OnChip_Memory_s1_agent_rsp_fifo:out_valid -> OnChip_Memory_s1_agent:rf_sink_valid
	wire  [134:0] onchip_memory_s1_agent_rsp_fifo_out_data;                                                // OnChip_Memory_s1_agent_rsp_fifo:out_data -> OnChip_Memory_s1_agent:rf_sink_data
	wire          onchip_memory_s1_agent_rsp_fifo_out_ready;                                               // OnChip_Memory_s1_agent:rf_sink_ready -> OnChip_Memory_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory_s1_agent_rsp_fifo_out_startofpacket;                                       // OnChip_Memory_s1_agent_rsp_fifo:out_startofpacket -> OnChip_Memory_s1_agent:rf_sink_startofpacket
	wire          onchip_memory_s1_agent_rsp_fifo_out_endofpacket;                                         // OnChip_Memory_s1_agent_rsp_fifo:out_endofpacket -> OnChip_Memory_s1_agent:rf_sink_endofpacket
	wire   [31:0] timer_0_s1_agent_m0_readdata;                                                            // timer_0_s1_translator:uav_readdata -> timer_0_s1_agent:m0_readdata
	wire          timer_0_s1_agent_m0_waitrequest;                                                         // timer_0_s1_translator:uav_waitrequest -> timer_0_s1_agent:m0_waitrequest
	wire          timer_0_s1_agent_m0_debugaccess;                                                         // timer_0_s1_agent:m0_debugaccess -> timer_0_s1_translator:uav_debugaccess
	wire   [18:0] timer_0_s1_agent_m0_address;                                                             // timer_0_s1_agent:m0_address -> timer_0_s1_translator:uav_address
	wire    [3:0] timer_0_s1_agent_m0_byteenable;                                                          // timer_0_s1_agent:m0_byteenable -> timer_0_s1_translator:uav_byteenable
	wire          timer_0_s1_agent_m0_read;                                                                // timer_0_s1_agent:m0_read -> timer_0_s1_translator:uav_read
	wire          timer_0_s1_agent_m0_readdatavalid;                                                       // timer_0_s1_translator:uav_readdatavalid -> timer_0_s1_agent:m0_readdatavalid
	wire          timer_0_s1_agent_m0_lock;                                                                // timer_0_s1_agent:m0_lock -> timer_0_s1_translator:uav_lock
	wire   [31:0] timer_0_s1_agent_m0_writedata;                                                           // timer_0_s1_agent:m0_writedata -> timer_0_s1_translator:uav_writedata
	wire          timer_0_s1_agent_m0_write;                                                               // timer_0_s1_agent:m0_write -> timer_0_s1_translator:uav_write
	wire    [2:0] timer_0_s1_agent_m0_burstcount;                                                          // timer_0_s1_agent:m0_burstcount -> timer_0_s1_translator:uav_burstcount
	wire          timer_0_s1_agent_rf_source_valid;                                                        // timer_0_s1_agent:rf_source_valid -> timer_0_s1_agent_rsp_fifo:in_valid
	wire   [98:0] timer_0_s1_agent_rf_source_data;                                                         // timer_0_s1_agent:rf_source_data -> timer_0_s1_agent_rsp_fifo:in_data
	wire          timer_0_s1_agent_rf_source_ready;                                                        // timer_0_s1_agent_rsp_fifo:in_ready -> timer_0_s1_agent:rf_source_ready
	wire          timer_0_s1_agent_rf_source_startofpacket;                                                // timer_0_s1_agent:rf_source_startofpacket -> timer_0_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_0_s1_agent_rf_source_endofpacket;                                                  // timer_0_s1_agent:rf_source_endofpacket -> timer_0_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_valid;                                                     // timer_0_s1_agent_rsp_fifo:out_valid -> timer_0_s1_agent:rf_sink_valid
	wire   [98:0] timer_0_s1_agent_rsp_fifo_out_data;                                                      // timer_0_s1_agent_rsp_fifo:out_data -> timer_0_s1_agent:rf_sink_data
	wire          timer_0_s1_agent_rsp_fifo_out_ready;                                                     // timer_0_s1_agent:rf_sink_ready -> timer_0_s1_agent_rsp_fifo:out_ready
	wire          timer_0_s1_agent_rsp_fifo_out_startofpacket;                                             // timer_0_s1_agent_rsp_fifo:out_startofpacket -> timer_0_s1_agent:rf_sink_startofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_endofpacket;                                               // timer_0_s1_agent_rsp_fifo:out_endofpacket -> timer_0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                                   // cmd_mux_010:src_valid -> timer_0_s1_agent:cp_valid
	wire   [97:0] cmd_mux_010_src_data;                                                                    // cmd_mux_010:src_data -> timer_0_s1_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                                   // timer_0_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [11:0] cmd_mux_010_src_channel;                                                                 // cmd_mux_010:src_channel -> timer_0_s1_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                           // cmd_mux_010:src_startofpacket -> timer_0_s1_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                             // cmd_mux_010:src_endofpacket -> timer_0_s1_agent:cp_endofpacket
	wire   [31:0] timer_1_s1_agent_m0_readdata;                                                            // timer_1_s1_translator:uav_readdata -> timer_1_s1_agent:m0_readdata
	wire          timer_1_s1_agent_m0_waitrequest;                                                         // timer_1_s1_translator:uav_waitrequest -> timer_1_s1_agent:m0_waitrequest
	wire          timer_1_s1_agent_m0_debugaccess;                                                         // timer_1_s1_agent:m0_debugaccess -> timer_1_s1_translator:uav_debugaccess
	wire   [18:0] timer_1_s1_agent_m0_address;                                                             // timer_1_s1_agent:m0_address -> timer_1_s1_translator:uav_address
	wire    [3:0] timer_1_s1_agent_m0_byteenable;                                                          // timer_1_s1_agent:m0_byteenable -> timer_1_s1_translator:uav_byteenable
	wire          timer_1_s1_agent_m0_read;                                                                // timer_1_s1_agent:m0_read -> timer_1_s1_translator:uav_read
	wire          timer_1_s1_agent_m0_readdatavalid;                                                       // timer_1_s1_translator:uav_readdatavalid -> timer_1_s1_agent:m0_readdatavalid
	wire          timer_1_s1_agent_m0_lock;                                                                // timer_1_s1_agent:m0_lock -> timer_1_s1_translator:uav_lock
	wire   [31:0] timer_1_s1_agent_m0_writedata;                                                           // timer_1_s1_agent:m0_writedata -> timer_1_s1_translator:uav_writedata
	wire          timer_1_s1_agent_m0_write;                                                               // timer_1_s1_agent:m0_write -> timer_1_s1_translator:uav_write
	wire    [2:0] timer_1_s1_agent_m0_burstcount;                                                          // timer_1_s1_agent:m0_burstcount -> timer_1_s1_translator:uav_burstcount
	wire          timer_1_s1_agent_rf_source_valid;                                                        // timer_1_s1_agent:rf_source_valid -> timer_1_s1_agent_rsp_fifo:in_valid
	wire   [98:0] timer_1_s1_agent_rf_source_data;                                                         // timer_1_s1_agent:rf_source_data -> timer_1_s1_agent_rsp_fifo:in_data
	wire          timer_1_s1_agent_rf_source_ready;                                                        // timer_1_s1_agent_rsp_fifo:in_ready -> timer_1_s1_agent:rf_source_ready
	wire          timer_1_s1_agent_rf_source_startofpacket;                                                // timer_1_s1_agent:rf_source_startofpacket -> timer_1_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_1_s1_agent_rf_source_endofpacket;                                                  // timer_1_s1_agent:rf_source_endofpacket -> timer_1_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_1_s1_agent_rsp_fifo_out_valid;                                                     // timer_1_s1_agent_rsp_fifo:out_valid -> timer_1_s1_agent:rf_sink_valid
	wire   [98:0] timer_1_s1_agent_rsp_fifo_out_data;                                                      // timer_1_s1_agent_rsp_fifo:out_data -> timer_1_s1_agent:rf_sink_data
	wire          timer_1_s1_agent_rsp_fifo_out_ready;                                                     // timer_1_s1_agent:rf_sink_ready -> timer_1_s1_agent_rsp_fifo:out_ready
	wire          timer_1_s1_agent_rsp_fifo_out_startofpacket;                                             // timer_1_s1_agent_rsp_fifo:out_startofpacket -> timer_1_s1_agent:rf_sink_startofpacket
	wire          timer_1_s1_agent_rsp_fifo_out_endofpacket;                                               // timer_1_s1_agent_rsp_fifo:out_endofpacket -> timer_1_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                                   // cmd_mux_011:src_valid -> timer_1_s1_agent:cp_valid
	wire   [97:0] cmd_mux_011_src_data;                                                                    // cmd_mux_011:src_data -> timer_1_s1_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                                   // timer_1_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [11:0] cmd_mux_011_src_channel;                                                                 // cmd_mux_011:src_channel -> timer_1_s1_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                           // cmd_mux_011:src_startofpacket -> timer_1_s1_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                             // cmd_mux_011:src_endofpacket -> timer_1_s1_agent:cp_endofpacket
	wire          nios_ii_processor_data_master_agent_cp_valid;                                            // NIOS_II_Processor_data_master_agent:cp_valid -> router:sink_valid
	wire   [97:0] nios_ii_processor_data_master_agent_cp_data;                                             // NIOS_II_Processor_data_master_agent:cp_data -> router:sink_data
	wire          nios_ii_processor_data_master_agent_cp_ready;                                            // router:sink_ready -> NIOS_II_Processor_data_master_agent:cp_ready
	wire          nios_ii_processor_data_master_agent_cp_startofpacket;                                    // NIOS_II_Processor_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          nios_ii_processor_data_master_agent_cp_endofpacket;                                      // NIOS_II_Processor_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                        // router:src_valid -> cmd_demux:sink_valid
	wire   [97:0] router_src_data;                                                                         // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                        // cmd_demux:sink_ready -> router:src_ready
	wire   [11:0] router_src_channel;                                                                      // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                                // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                                  // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          nios_ii_processor_instruction_master_agent_cp_valid;                                     // NIOS_II_Processor_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire   [97:0] nios_ii_processor_instruction_master_agent_cp_data;                                      // NIOS_II_Processor_instruction_master_agent:cp_data -> router_001:sink_data
	wire          nios_ii_processor_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> NIOS_II_Processor_instruction_master_agent:cp_ready
	wire          nios_ii_processor_instruction_master_agent_cp_startofpacket;                             // NIOS_II_Processor_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          nios_ii_processor_instruction_master_agent_cp_endofpacket;                               // NIOS_II_Processor_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                                    // router_001:src_valid -> cmd_demux_001:sink_valid
	wire   [97:0] router_001_src_data;                                                                     // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                                    // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [11:0] router_001_src_channel;                                                                  // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                            // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                              // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                              // JTAG_UART_avalon_jtag_slave_agent:rp_valid -> router_002:sink_valid
	wire   [97:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                               // JTAG_UART_avalon_jtag_slave_agent:rp_data -> router_002:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                              // router_002:sink_ready -> JTAG_UART_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                                      // JTAG_UART_avalon_jtag_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                        // JTAG_UART_avalon_jtag_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                    // router_002:src_valid -> rsp_demux:sink_valid
	wire   [97:0] router_002_src_data;                                                                     // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                                    // rsp_demux:sink_ready -> router_002:src_ready
	wire   [11:0] router_002_src_channel;                                                                  // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                                            // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                              // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          lcd_avalon_lcd_slave_agent_rp_valid;                                                     // LCD_avalon_lcd_slave_agent:rp_valid -> router_003:sink_valid
	wire   [70:0] lcd_avalon_lcd_slave_agent_rp_data;                                                      // LCD_avalon_lcd_slave_agent:rp_data -> router_003:sink_data
	wire          lcd_avalon_lcd_slave_agent_rp_ready;                                                     // router_003:sink_ready -> LCD_avalon_lcd_slave_agent:rp_ready
	wire          lcd_avalon_lcd_slave_agent_rp_startofpacket;                                             // LCD_avalon_lcd_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          lcd_avalon_lcd_slave_agent_rp_endofpacket;                                               // LCD_avalon_lcd_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          sw_sliders_avalon_parallel_port_slave_agent_rp_valid;                                    // SW_SLIDERS_avalon_parallel_port_slave_agent:rp_valid -> router_004:sink_valid
	wire   [97:0] sw_sliders_avalon_parallel_port_slave_agent_rp_data;                                     // SW_SLIDERS_avalon_parallel_port_slave_agent:rp_data -> router_004:sink_data
	wire          sw_sliders_avalon_parallel_port_slave_agent_rp_ready;                                    // router_004:sink_ready -> SW_SLIDERS_avalon_parallel_port_slave_agent:rp_ready
	wire          sw_sliders_avalon_parallel_port_slave_agent_rp_startofpacket;                            // SW_SLIDERS_avalon_parallel_port_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          sw_sliders_avalon_parallel_port_slave_agent_rp_endofpacket;                              // SW_SLIDERS_avalon_parallel_port_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                    // router_004:src_valid -> rsp_demux_002:sink_valid
	wire   [97:0] router_004_src_data;                                                                     // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                                    // rsp_demux_002:sink_ready -> router_004:src_ready
	wire   [11:0] router_004_src_channel;                                                                  // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                                            // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                                              // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          leds_green_avalon_parallel_port_slave_agent_rp_valid;                                    // LEDS_GREEN_avalon_parallel_port_slave_agent:rp_valid -> router_005:sink_valid
	wire   [97:0] leds_green_avalon_parallel_port_slave_agent_rp_data;                                     // LEDS_GREEN_avalon_parallel_port_slave_agent:rp_data -> router_005:sink_data
	wire          leds_green_avalon_parallel_port_slave_agent_rp_ready;                                    // router_005:sink_ready -> LEDS_GREEN_avalon_parallel_port_slave_agent:rp_ready
	wire          leds_green_avalon_parallel_port_slave_agent_rp_startofpacket;                            // LEDS_GREEN_avalon_parallel_port_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          leds_green_avalon_parallel_port_slave_agent_rp_endofpacket;                              // LEDS_GREEN_avalon_parallel_port_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                    // router_005:src_valid -> rsp_demux_003:sink_valid
	wire   [97:0] router_005_src_data;                                                                     // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                                    // rsp_demux_003:sink_ready -> router_005:src_ready
	wire   [11:0] router_005_src_channel;                                                                  // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                                            // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                                              // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          leds_red_avalon_parallel_port_slave_agent_rp_valid;                                      // LEDS_RED_avalon_parallel_port_slave_agent:rp_valid -> router_006:sink_valid
	wire   [97:0] leds_red_avalon_parallel_port_slave_agent_rp_data;                                       // LEDS_RED_avalon_parallel_port_slave_agent:rp_data -> router_006:sink_data
	wire          leds_red_avalon_parallel_port_slave_agent_rp_ready;                                      // router_006:sink_ready -> LEDS_RED_avalon_parallel_port_slave_agent:rp_ready
	wire          leds_red_avalon_parallel_port_slave_agent_rp_startofpacket;                              // LEDS_RED_avalon_parallel_port_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          leds_red_avalon_parallel_port_slave_agent_rp_endofpacket;                                // LEDS_RED_avalon_parallel_port_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                    // router_006:src_valid -> rsp_demux_004:sink_valid
	wire   [97:0] router_006_src_data;                                                                     // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                                    // rsp_demux_004:sink_ready -> router_006:src_ready
	wire   [11:0] router_006_src_channel;                                                                  // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                                            // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                                              // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          hex_3_avalon_parallel_port_slave_agent_rp_valid;                                         // HEX_3_avalon_parallel_port_slave_agent:rp_valid -> router_007:sink_valid
	wire   [97:0] hex_3_avalon_parallel_port_slave_agent_rp_data;                                          // HEX_3_avalon_parallel_port_slave_agent:rp_data -> router_007:sink_data
	wire          hex_3_avalon_parallel_port_slave_agent_rp_ready;                                         // router_007:sink_ready -> HEX_3_avalon_parallel_port_slave_agent:rp_ready
	wire          hex_3_avalon_parallel_port_slave_agent_rp_startofpacket;                                 // HEX_3_avalon_parallel_port_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          hex_3_avalon_parallel_port_slave_agent_rp_endofpacket;                                   // HEX_3_avalon_parallel_port_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                    // router_007:src_valid -> rsp_demux_005:sink_valid
	wire   [97:0] router_007_src_data;                                                                     // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                                    // rsp_demux_005:sink_ready -> router_007:src_ready
	wire   [11:0] router_007_src_channel;                                                                  // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                                            // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                                              // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          hex_7_avalon_parallel_port_slave_agent_rp_valid;                                         // HEX_7_avalon_parallel_port_slave_agent:rp_valid -> router_008:sink_valid
	wire   [97:0] hex_7_avalon_parallel_port_slave_agent_rp_data;                                          // HEX_7_avalon_parallel_port_slave_agent:rp_data -> router_008:sink_data
	wire          hex_7_avalon_parallel_port_slave_agent_rp_ready;                                         // router_008:sink_ready -> HEX_7_avalon_parallel_port_slave_agent:rp_ready
	wire          hex_7_avalon_parallel_port_slave_agent_rp_startofpacket;                                 // HEX_7_avalon_parallel_port_slave_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          hex_7_avalon_parallel_port_slave_agent_rp_endofpacket;                                   // HEX_7_avalon_parallel_port_slave_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                    // router_008:src_valid -> rsp_demux_006:sink_valid
	wire   [97:0] router_008_src_data;                                                                     // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                                                    // rsp_demux_006:sink_ready -> router_008:src_ready
	wire   [11:0] router_008_src_channel;                                                                  // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                                            // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                                              // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          pushbuttons_avalon_parallel_port_slave_agent_rp_valid;                                   // Pushbuttons_avalon_parallel_port_slave_agent:rp_valid -> router_009:sink_valid
	wire   [97:0] pushbuttons_avalon_parallel_port_slave_agent_rp_data;                                    // Pushbuttons_avalon_parallel_port_slave_agent:rp_data -> router_009:sink_data
	wire          pushbuttons_avalon_parallel_port_slave_agent_rp_ready;                                   // router_009:sink_ready -> Pushbuttons_avalon_parallel_port_slave_agent:rp_ready
	wire          pushbuttons_avalon_parallel_port_slave_agent_rp_startofpacket;                           // Pushbuttons_avalon_parallel_port_slave_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          pushbuttons_avalon_parallel_port_slave_agent_rp_endofpacket;                             // Pushbuttons_avalon_parallel_port_slave_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                    // router_009:src_valid -> rsp_demux_007:sink_valid
	wire   [97:0] router_009_src_data;                                                                     // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                                                    // rsp_demux_007:sink_ready -> router_009:src_ready
	wire   [11:0] router_009_src_channel;                                                                  // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                                            // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                                              // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          nios_ii_processor_debug_mem_slave_agent_rp_valid;                                        // NIOS_II_Processor_debug_mem_slave_agent:rp_valid -> router_010:sink_valid
	wire   [97:0] nios_ii_processor_debug_mem_slave_agent_rp_data;                                         // NIOS_II_Processor_debug_mem_slave_agent:rp_data -> router_010:sink_data
	wire          nios_ii_processor_debug_mem_slave_agent_rp_ready;                                        // router_010:sink_ready -> NIOS_II_Processor_debug_mem_slave_agent:rp_ready
	wire          nios_ii_processor_debug_mem_slave_agent_rp_startofpacket;                                // NIOS_II_Processor_debug_mem_slave_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          nios_ii_processor_debug_mem_slave_agent_rp_endofpacket;                                  // NIOS_II_Processor_debug_mem_slave_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                    // router_010:src_valid -> rsp_demux_008:sink_valid
	wire   [97:0] router_010_src_data;                                                                     // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                                                    // rsp_demux_008:sink_ready -> router_010:src_ready
	wire   [11:0] router_010_src_channel;                                                                  // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                                            // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                                              // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          onchip_memory_s1_agent_rp_valid;                                                         // OnChip_Memory_s1_agent:rp_valid -> router_011:sink_valid
	wire  [133:0] onchip_memory_s1_agent_rp_data;                                                          // OnChip_Memory_s1_agent:rp_data -> router_011:sink_data
	wire          onchip_memory_s1_agent_rp_ready;                                                         // router_011:sink_ready -> OnChip_Memory_s1_agent:rp_ready
	wire          onchip_memory_s1_agent_rp_startofpacket;                                                 // OnChip_Memory_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          onchip_memory_s1_agent_rp_endofpacket;                                                   // OnChip_Memory_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          timer_0_s1_agent_rp_valid;                                                               // timer_0_s1_agent:rp_valid -> router_012:sink_valid
	wire   [97:0] timer_0_s1_agent_rp_data;                                                                // timer_0_s1_agent:rp_data -> router_012:sink_data
	wire          timer_0_s1_agent_rp_ready;                                                               // router_012:sink_ready -> timer_0_s1_agent:rp_ready
	wire          timer_0_s1_agent_rp_startofpacket;                                                       // timer_0_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          timer_0_s1_agent_rp_endofpacket;                                                         // timer_0_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                    // router_012:src_valid -> rsp_demux_010:sink_valid
	wire   [97:0] router_012_src_data;                                                                     // router_012:src_data -> rsp_demux_010:sink_data
	wire          router_012_src_ready;                                                                    // rsp_demux_010:sink_ready -> router_012:src_ready
	wire   [11:0] router_012_src_channel;                                                                  // router_012:src_channel -> rsp_demux_010:sink_channel
	wire          router_012_src_startofpacket;                                                            // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_012_src_endofpacket;                                                              // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          timer_1_s1_agent_rp_valid;                                                               // timer_1_s1_agent:rp_valid -> router_013:sink_valid
	wire   [97:0] timer_1_s1_agent_rp_data;                                                                // timer_1_s1_agent:rp_data -> router_013:sink_data
	wire          timer_1_s1_agent_rp_ready;                                                               // router_013:sink_ready -> timer_1_s1_agent:rp_ready
	wire          timer_1_s1_agent_rp_startofpacket;                                                       // timer_1_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          timer_1_s1_agent_rp_endofpacket;                                                         // timer_1_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                    // router_013:src_valid -> rsp_demux_011:sink_valid
	wire   [97:0] router_013_src_data;                                                                     // router_013:src_data -> rsp_demux_011:sink_data
	wire          router_013_src_ready;                                                                    // rsp_demux_011:sink_ready -> router_013:src_ready
	wire   [11:0] router_013_src_channel;                                                                  // router_013:src_channel -> rsp_demux_011:sink_channel
	wire          router_013_src_startofpacket;                                                            // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_013_src_endofpacket;                                                              // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          lcd_avalon_lcd_slave_burst_adapter_source0_valid;                                        // LCD_avalon_lcd_slave_burst_adapter:source0_valid -> LCD_avalon_lcd_slave_agent:cp_valid
	wire   [70:0] lcd_avalon_lcd_slave_burst_adapter_source0_data;                                         // LCD_avalon_lcd_slave_burst_adapter:source0_data -> LCD_avalon_lcd_slave_agent:cp_data
	wire          lcd_avalon_lcd_slave_burst_adapter_source0_ready;                                        // LCD_avalon_lcd_slave_agent:cp_ready -> LCD_avalon_lcd_slave_burst_adapter:source0_ready
	wire   [11:0] lcd_avalon_lcd_slave_burst_adapter_source0_channel;                                      // LCD_avalon_lcd_slave_burst_adapter:source0_channel -> LCD_avalon_lcd_slave_agent:cp_channel
	wire          lcd_avalon_lcd_slave_burst_adapter_source0_startofpacket;                                // LCD_avalon_lcd_slave_burst_adapter:source0_startofpacket -> LCD_avalon_lcd_slave_agent:cp_startofpacket
	wire          lcd_avalon_lcd_slave_burst_adapter_source0_endofpacket;                                  // LCD_avalon_lcd_slave_burst_adapter:source0_endofpacket -> LCD_avalon_lcd_slave_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                                    // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire   [97:0] cmd_demux_src0_data;                                                                     // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                    // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [11:0] cmd_demux_src0_channel;                                                                  // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                            // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                              // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                    // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire   [97:0] cmd_demux_src1_data;                                                                     // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                                    // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [11:0] cmd_demux_src1_channel;                                                                  // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                            // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                              // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                    // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire   [97:0] cmd_demux_src2_data;                                                                     // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                                    // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [11:0] cmd_demux_src2_channel;                                                                  // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                            // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                              // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                                    // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire   [97:0] cmd_demux_src3_data;                                                                     // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                                    // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [11:0] cmd_demux_src3_channel;                                                                  // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                            // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                              // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                                    // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire   [97:0] cmd_demux_src4_data;                                                                     // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                                    // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [11:0] cmd_demux_src4_channel;                                                                  // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                            // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                              // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                                    // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire   [97:0] cmd_demux_src5_data;                                                                     // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                                    // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [11:0] cmd_demux_src5_channel;                                                                  // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                            // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                              // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                                    // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire   [97:0] cmd_demux_src6_data;                                                                     // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                                    // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [11:0] cmd_demux_src6_channel;                                                                  // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                            // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                              // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                                    // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire   [97:0] cmd_demux_src7_data;                                                                     // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                                    // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [11:0] cmd_demux_src7_channel;                                                                  // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                            // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                              // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                                    // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire   [97:0] cmd_demux_src8_data;                                                                     // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                                    // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [11:0] cmd_demux_src8_channel;                                                                  // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                            // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                              // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                                    // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire   [97:0] cmd_demux_src9_data;                                                                     // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                                    // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [11:0] cmd_demux_src9_channel;                                                                  // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                            // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                              // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                                   // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire   [97:0] cmd_demux_src10_data;                                                                    // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                                   // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [11:0] cmd_demux_src10_channel;                                                                 // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                           // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                             // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                                   // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire   [97:0] cmd_demux_src11_data;                                                                    // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                                   // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [11:0] cmd_demux_src11_channel;                                                                 // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                                           // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                             // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                // cmd_demux_001:src0_valid -> cmd_mux_008:sink1_valid
	wire   [97:0] cmd_demux_001_src0_data;                                                                 // cmd_demux_001:src0_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src0_ready;                                                                // cmd_mux_008:sink1_ready -> cmd_demux_001:src0_ready
	wire   [11:0] cmd_demux_001_src0_channel;                                                              // cmd_demux_001:src0_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                        // cmd_demux_001:src0_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                          // cmd_demux_001:src0_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                // cmd_demux_001:src1_valid -> cmd_mux_009:sink1_valid
	wire   [97:0] cmd_demux_001_src1_data;                                                                 // cmd_demux_001:src1_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_001_src1_ready;                                                                // cmd_mux_009:sink1_ready -> cmd_demux_001:src1_ready
	wire   [11:0] cmd_demux_001_src1_channel;                                                              // cmd_demux_001:src1_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                        // cmd_demux_001:src1_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                          // cmd_demux_001:src1_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                                // cmd_demux_001:src2_valid -> cmd_mux_010:sink1_valid
	wire   [97:0] cmd_demux_001_src2_data;                                                                 // cmd_demux_001:src2_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_001_src2_ready;                                                                // cmd_mux_010:sink1_ready -> cmd_demux_001:src2_ready
	wire   [11:0] cmd_demux_001_src2_channel;                                                              // cmd_demux_001:src2_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                        // cmd_demux_001:src2_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                          // cmd_demux_001:src2_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                                // cmd_demux_001:src3_valid -> cmd_mux_011:sink1_valid
	wire   [97:0] cmd_demux_001_src3_data;                                                                 // cmd_demux_001:src3_data -> cmd_mux_011:sink1_data
	wire          cmd_demux_001_src3_ready;                                                                // cmd_mux_011:sink1_ready -> cmd_demux_001:src3_ready
	wire   [11:0] cmd_demux_001_src3_channel;                                                              // cmd_demux_001:src3_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                                        // cmd_demux_001:src3_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                          // cmd_demux_001:src3_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                                    // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire   [97:0] rsp_demux_src0_data;                                                                     // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                    // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [11:0] rsp_demux_src0_channel;                                                                  // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                            // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                              // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire   [97:0] rsp_demux_001_src0_data;                                                                 // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                                // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [11:0] rsp_demux_001_src0_channel;                                                              // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                        // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                          // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire   [97:0] rsp_demux_002_src0_data;                                                                 // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                                // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [11:0] rsp_demux_002_src0_channel;                                                              // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                        // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                          // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire   [97:0] rsp_demux_003_src0_data;                                                                 // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                                // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [11:0] rsp_demux_003_src0_channel;                                                              // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                        // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                          // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire   [97:0] rsp_demux_004_src0_data;                                                                 // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                                // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [11:0] rsp_demux_004_src0_channel;                                                              // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                        // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                          // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire   [97:0] rsp_demux_005_src0_data;                                                                 // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                                // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [11:0] rsp_demux_005_src0_channel;                                                              // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                        // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                          // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire   [97:0] rsp_demux_006_src0_data;                                                                 // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                                // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [11:0] rsp_demux_006_src0_channel;                                                              // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                        // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                          // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire   [97:0] rsp_demux_007_src0_data;                                                                 // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                                // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [11:0] rsp_demux_007_src0_channel;                                                              // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                        // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                          // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire   [97:0] rsp_demux_008_src0_data;                                                                 // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                                // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [11:0] rsp_demux_008_src0_channel;                                                              // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                        // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                          // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                                // rsp_demux_008:src1_valid -> rsp_mux_001:sink0_valid
	wire   [97:0] rsp_demux_008_src1_data;                                                                 // rsp_demux_008:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_008_src1_ready;                                                                // rsp_mux_001:sink0_ready -> rsp_demux_008:src1_ready
	wire   [11:0] rsp_demux_008_src1_channel;                                                              // rsp_demux_008:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_008_src1_startofpacket;                                                        // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                          // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire   [97:0] rsp_demux_009_src0_data;                                                                 // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                                // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [11:0] rsp_demux_009_src0_channel;                                                              // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                        // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                          // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_009_src1_valid;                                                                // rsp_demux_009:src1_valid -> rsp_mux_001:sink1_valid
	wire   [97:0] rsp_demux_009_src1_data;                                                                 // rsp_demux_009:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_009_src1_ready;                                                                // rsp_mux_001:sink1_ready -> rsp_demux_009:src1_ready
	wire   [11:0] rsp_demux_009_src1_channel;                                                              // rsp_demux_009:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_009_src1_startofpacket;                                                        // rsp_demux_009:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                                          // rsp_demux_009:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire   [97:0] rsp_demux_010_src0_data;                                                                 // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                                // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [11:0] rsp_demux_010_src0_channel;                                                              // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                        // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                          // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_010_src1_valid;                                                                // rsp_demux_010:src1_valid -> rsp_mux_001:sink2_valid
	wire   [97:0] rsp_demux_010_src1_data;                                                                 // rsp_demux_010:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_010_src1_ready;                                                                // rsp_mux_001:sink2_ready -> rsp_demux_010:src1_ready
	wire   [11:0] rsp_demux_010_src1_channel;                                                              // rsp_demux_010:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_010_src1_startofpacket;                                                        // rsp_demux_010:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                                          // rsp_demux_010:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_011_src0_valid;                                                                // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire   [97:0] rsp_demux_011_src0_data;                                                                 // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                                // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [11:0] rsp_demux_011_src0_channel;                                                              // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                        // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                          // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_011_src1_valid;                                                                // rsp_demux_011:src1_valid -> rsp_mux_001:sink3_valid
	wire   [97:0] rsp_demux_011_src1_data;                                                                 // rsp_demux_011:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_011_src1_ready;                                                                // rsp_mux_001:sink3_ready -> rsp_demux_011:src1_ready
	wire   [11:0] rsp_demux_011_src1_channel;                                                              // rsp_demux_011:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_011_src1_startofpacket;                                                        // rsp_demux_011:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                                          // rsp_demux_011:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          cmd_mux_009_src_valid;                                                                   // cmd_mux_009:src_valid -> OnChip_Memory_s1_cmd_width_adapter:in_valid
	wire   [97:0] cmd_mux_009_src_data;                                                                    // cmd_mux_009:src_data -> OnChip_Memory_s1_cmd_width_adapter:in_data
	wire          cmd_mux_009_src_ready;                                                                   // OnChip_Memory_s1_cmd_width_adapter:in_ready -> cmd_mux_009:src_ready
	wire   [11:0] cmd_mux_009_src_channel;                                                                 // cmd_mux_009:src_channel -> OnChip_Memory_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_009_src_startofpacket;                                                           // cmd_mux_009:src_startofpacket -> OnChip_Memory_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                             // cmd_mux_009:src_endofpacket -> OnChip_Memory_s1_cmd_width_adapter:in_endofpacket
	wire          onchip_memory_s1_cmd_width_adapter_src_valid;                                            // OnChip_Memory_s1_cmd_width_adapter:out_valid -> OnChip_Memory_s1_agent:cp_valid
	wire  [133:0] onchip_memory_s1_cmd_width_adapter_src_data;                                             // OnChip_Memory_s1_cmd_width_adapter:out_data -> OnChip_Memory_s1_agent:cp_data
	wire          onchip_memory_s1_cmd_width_adapter_src_ready;                                            // OnChip_Memory_s1_agent:cp_ready -> OnChip_Memory_s1_cmd_width_adapter:out_ready
	wire   [11:0] onchip_memory_s1_cmd_width_adapter_src_channel;                                          // OnChip_Memory_s1_cmd_width_adapter:out_channel -> OnChip_Memory_s1_agent:cp_channel
	wire          onchip_memory_s1_cmd_width_adapter_src_startofpacket;                                    // OnChip_Memory_s1_cmd_width_adapter:out_startofpacket -> OnChip_Memory_s1_agent:cp_startofpacket
	wire          onchip_memory_s1_cmd_width_adapter_src_endofpacket;                                      // OnChip_Memory_s1_cmd_width_adapter:out_endofpacket -> OnChip_Memory_s1_agent:cp_endofpacket
	wire          router_003_src_valid;                                                                    // router_003:src_valid -> LCD_avalon_lcd_slave_rsp_width_adapter:in_valid
	wire   [70:0] router_003_src_data;                                                                     // router_003:src_data -> LCD_avalon_lcd_slave_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                                                    // LCD_avalon_lcd_slave_rsp_width_adapter:in_ready -> router_003:src_ready
	wire   [11:0] router_003_src_channel;                                                                  // router_003:src_channel -> LCD_avalon_lcd_slave_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                                            // router_003:src_startofpacket -> LCD_avalon_lcd_slave_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                                              // router_003:src_endofpacket -> LCD_avalon_lcd_slave_rsp_width_adapter:in_endofpacket
	wire          lcd_avalon_lcd_slave_rsp_width_adapter_src_valid;                                        // LCD_avalon_lcd_slave_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire   [97:0] lcd_avalon_lcd_slave_rsp_width_adapter_src_data;                                         // LCD_avalon_lcd_slave_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          lcd_avalon_lcd_slave_rsp_width_adapter_src_ready;                                        // rsp_demux_001:sink_ready -> LCD_avalon_lcd_slave_rsp_width_adapter:out_ready
	wire   [11:0] lcd_avalon_lcd_slave_rsp_width_adapter_src_channel;                                      // LCD_avalon_lcd_slave_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          lcd_avalon_lcd_slave_rsp_width_adapter_src_startofpacket;                                // LCD_avalon_lcd_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          lcd_avalon_lcd_slave_rsp_width_adapter_src_endofpacket;                                  // LCD_avalon_lcd_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_011_src_valid;                                                                    // router_011:src_valid -> OnChip_Memory_s1_rsp_width_adapter:in_valid
	wire  [133:0] router_011_src_data;                                                                     // router_011:src_data -> OnChip_Memory_s1_rsp_width_adapter:in_data
	wire          router_011_src_ready;                                                                    // OnChip_Memory_s1_rsp_width_adapter:in_ready -> router_011:src_ready
	wire   [11:0] router_011_src_channel;                                                                  // router_011:src_channel -> OnChip_Memory_s1_rsp_width_adapter:in_channel
	wire          router_011_src_startofpacket;                                                            // router_011:src_startofpacket -> OnChip_Memory_s1_rsp_width_adapter:in_startofpacket
	wire          router_011_src_endofpacket;                                                              // router_011:src_endofpacket -> OnChip_Memory_s1_rsp_width_adapter:in_endofpacket
	wire          onchip_memory_s1_rsp_width_adapter_src_valid;                                            // OnChip_Memory_s1_rsp_width_adapter:out_valid -> rsp_demux_009:sink_valid
	wire   [97:0] onchip_memory_s1_rsp_width_adapter_src_data;                                             // OnChip_Memory_s1_rsp_width_adapter:out_data -> rsp_demux_009:sink_data
	wire          onchip_memory_s1_rsp_width_adapter_src_ready;                                            // rsp_demux_009:sink_ready -> OnChip_Memory_s1_rsp_width_adapter:out_ready
	wire   [11:0] onchip_memory_s1_rsp_width_adapter_src_channel;                                          // OnChip_Memory_s1_rsp_width_adapter:out_channel -> rsp_demux_009:sink_channel
	wire          onchip_memory_s1_rsp_width_adapter_src_startofpacket;                                    // OnChip_Memory_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          onchip_memory_s1_rsp_width_adapter_src_endofpacket;                                      // OnChip_Memory_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                                   // cmd_mux_001:src_valid -> LCD_avalon_lcd_slave_cmd_width_adapter:in_valid
	wire   [97:0] cmd_mux_001_src_data;                                                                    // cmd_mux_001:src_data -> LCD_avalon_lcd_slave_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                                                   // LCD_avalon_lcd_slave_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire   [11:0] cmd_mux_001_src_channel;                                                                 // cmd_mux_001:src_channel -> LCD_avalon_lcd_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                                           // cmd_mux_001:src_startofpacket -> LCD_avalon_lcd_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                             // cmd_mux_001:src_endofpacket -> LCD_avalon_lcd_slave_cmd_width_adapter:in_endofpacket
	wire          lcd_avalon_lcd_slave_cmd_width_adapter_src_valid;                                        // LCD_avalon_lcd_slave_cmd_width_adapter:out_valid -> LCD_avalon_lcd_slave_burst_adapter:sink0_valid
	wire   [70:0] lcd_avalon_lcd_slave_cmd_width_adapter_src_data;                                         // LCD_avalon_lcd_slave_cmd_width_adapter:out_data -> LCD_avalon_lcd_slave_burst_adapter:sink0_data
	wire          lcd_avalon_lcd_slave_cmd_width_adapter_src_ready;                                        // LCD_avalon_lcd_slave_burst_adapter:sink0_ready -> LCD_avalon_lcd_slave_cmd_width_adapter:out_ready
	wire   [11:0] lcd_avalon_lcd_slave_cmd_width_adapter_src_channel;                                      // LCD_avalon_lcd_slave_cmd_width_adapter:out_channel -> LCD_avalon_lcd_slave_burst_adapter:sink0_channel
	wire          lcd_avalon_lcd_slave_cmd_width_adapter_src_startofpacket;                                // LCD_avalon_lcd_slave_cmd_width_adapter:out_startofpacket -> LCD_avalon_lcd_slave_burst_adapter:sink0_startofpacket
	wire          lcd_avalon_lcd_slave_cmd_width_adapter_src_endofpacket;                                  // LCD_avalon_lcd_slave_cmd_width_adapter:out_endofpacket -> LCD_avalon_lcd_slave_burst_adapter:sink0_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                  // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                                   // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter:in_0_ready -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                           // avalon_st_adapter:out_0_valid -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                            // avalon_st_adapter:out_0_data -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                           // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                           // avalon_st_adapter:out_0_error -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          lcd_avalon_lcd_slave_agent_rdata_fifo_src_valid;                                         // LCD_avalon_lcd_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire    [9:0] lcd_avalon_lcd_slave_agent_rdata_fifo_src_data;                                          // LCD_avalon_lcd_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          lcd_avalon_lcd_slave_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_001:in_0_ready -> LCD_avalon_lcd_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                       // avalon_st_adapter_001:out_0_valid -> LCD_avalon_lcd_slave_agent:rdata_fifo_sink_valid
	wire    [9:0] avalon_st_adapter_001_out_0_data;                                                        // avalon_st_adapter_001:out_0_data -> LCD_avalon_lcd_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                       // LCD_avalon_lcd_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                       // avalon_st_adapter_001:out_0_error -> LCD_avalon_lcd_slave_agent:rdata_fifo_sink_error
	wire          sw_sliders_avalon_parallel_port_slave_agent_rdata_fifo_src_valid;                        // SW_SLIDERS_avalon_parallel_port_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] sw_sliders_avalon_parallel_port_slave_agent_rdata_fifo_src_data;                         // SW_SLIDERS_avalon_parallel_port_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          sw_sliders_avalon_parallel_port_slave_agent_rdata_fifo_src_ready;                        // avalon_st_adapter_002:in_0_ready -> SW_SLIDERS_avalon_parallel_port_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                       // avalon_st_adapter_002:out_0_valid -> SW_SLIDERS_avalon_parallel_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                        // avalon_st_adapter_002:out_0_data -> SW_SLIDERS_avalon_parallel_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                       // SW_SLIDERS_avalon_parallel_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                       // avalon_st_adapter_002:out_0_error -> SW_SLIDERS_avalon_parallel_port_slave_agent:rdata_fifo_sink_error
	wire          leds_green_avalon_parallel_port_slave_agent_rdata_fifo_src_valid;                        // LEDS_GREEN_avalon_parallel_port_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] leds_green_avalon_parallel_port_slave_agent_rdata_fifo_src_data;                         // LEDS_GREEN_avalon_parallel_port_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          leds_green_avalon_parallel_port_slave_agent_rdata_fifo_src_ready;                        // avalon_st_adapter_003:in_0_ready -> LEDS_GREEN_avalon_parallel_port_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                       // avalon_st_adapter_003:out_0_valid -> LEDS_GREEN_avalon_parallel_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                        // avalon_st_adapter_003:out_0_data -> LEDS_GREEN_avalon_parallel_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                       // LEDS_GREEN_avalon_parallel_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                       // avalon_st_adapter_003:out_0_error -> LEDS_GREEN_avalon_parallel_port_slave_agent:rdata_fifo_sink_error
	wire          leds_red_avalon_parallel_port_slave_agent_rdata_fifo_src_valid;                          // LEDS_RED_avalon_parallel_port_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] leds_red_avalon_parallel_port_slave_agent_rdata_fifo_src_data;                           // LEDS_RED_avalon_parallel_port_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          leds_red_avalon_parallel_port_slave_agent_rdata_fifo_src_ready;                          // avalon_st_adapter_004:in_0_ready -> LEDS_RED_avalon_parallel_port_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                       // avalon_st_adapter_004:out_0_valid -> LEDS_RED_avalon_parallel_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                        // avalon_st_adapter_004:out_0_data -> LEDS_RED_avalon_parallel_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                       // LEDS_RED_avalon_parallel_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                       // avalon_st_adapter_004:out_0_error -> LEDS_RED_avalon_parallel_port_slave_agent:rdata_fifo_sink_error
	wire          hex_3_avalon_parallel_port_slave_agent_rdata_fifo_src_valid;                             // HEX_3_avalon_parallel_port_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] hex_3_avalon_parallel_port_slave_agent_rdata_fifo_src_data;                              // HEX_3_avalon_parallel_port_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          hex_3_avalon_parallel_port_slave_agent_rdata_fifo_src_ready;                             // avalon_st_adapter_005:in_0_ready -> HEX_3_avalon_parallel_port_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                       // avalon_st_adapter_005:out_0_valid -> HEX_3_avalon_parallel_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                        // avalon_st_adapter_005:out_0_data -> HEX_3_avalon_parallel_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                       // HEX_3_avalon_parallel_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                       // avalon_st_adapter_005:out_0_error -> HEX_3_avalon_parallel_port_slave_agent:rdata_fifo_sink_error
	wire          hex_7_avalon_parallel_port_slave_agent_rdata_fifo_src_valid;                             // HEX_7_avalon_parallel_port_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] hex_7_avalon_parallel_port_slave_agent_rdata_fifo_src_data;                              // HEX_7_avalon_parallel_port_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          hex_7_avalon_parallel_port_slave_agent_rdata_fifo_src_ready;                             // avalon_st_adapter_006:in_0_ready -> HEX_7_avalon_parallel_port_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                       // avalon_st_adapter_006:out_0_valid -> HEX_7_avalon_parallel_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                        // avalon_st_adapter_006:out_0_data -> HEX_7_avalon_parallel_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                       // HEX_7_avalon_parallel_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                       // avalon_st_adapter_006:out_0_error -> HEX_7_avalon_parallel_port_slave_agent:rdata_fifo_sink_error
	wire          pushbuttons_avalon_parallel_port_slave_agent_rdata_fifo_src_valid;                       // Pushbuttons_avalon_parallel_port_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] pushbuttons_avalon_parallel_port_slave_agent_rdata_fifo_src_data;                        // Pushbuttons_avalon_parallel_port_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          pushbuttons_avalon_parallel_port_slave_agent_rdata_fifo_src_ready;                       // avalon_st_adapter_007:in_0_ready -> Pushbuttons_avalon_parallel_port_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                       // avalon_st_adapter_007:out_0_valid -> Pushbuttons_avalon_parallel_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                        // avalon_st_adapter_007:out_0_data -> Pushbuttons_avalon_parallel_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                       // Pushbuttons_avalon_parallel_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                       // avalon_st_adapter_007:out_0_error -> Pushbuttons_avalon_parallel_port_slave_agent:rdata_fifo_sink_error
	wire          nios_ii_processor_debug_mem_slave_agent_rdata_fifo_src_valid;                            // NIOS_II_Processor_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] nios_ii_processor_debug_mem_slave_agent_rdata_fifo_src_data;                             // NIOS_II_Processor_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          nios_ii_processor_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_008:in_0_ready -> NIOS_II_Processor_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                       // avalon_st_adapter_008:out_0_valid -> NIOS_II_Processor_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                        // avalon_st_adapter_008:out_0_data -> NIOS_II_Processor_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                       // NIOS_II_Processor_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                       // avalon_st_adapter_008:out_0_error -> NIOS_II_Processor_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          onchip_memory_s1_agent_rdata_fifo_src_valid;                                             // OnChip_Memory_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [65:0] onchip_memory_s1_agent_rdata_fifo_src_data;                                              // OnChip_Memory_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          onchip_memory_s1_agent_rdata_fifo_src_ready;                                             // avalon_st_adapter_009:in_0_ready -> OnChip_Memory_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                       // avalon_st_adapter_009:out_0_valid -> OnChip_Memory_s1_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_009_out_0_data;                                                        // avalon_st_adapter_009:out_0_data -> OnChip_Memory_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                       // OnChip_Memory_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                       // avalon_st_adapter_009:out_0_error -> OnChip_Memory_s1_agent:rdata_fifo_sink_error
	wire          timer_0_s1_agent_rdata_fifo_src_valid;                                                   // timer_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] timer_0_s1_agent_rdata_fifo_src_data;                                                    // timer_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          timer_0_s1_agent_rdata_fifo_src_ready;                                                   // avalon_st_adapter_010:in_0_ready -> timer_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                       // avalon_st_adapter_010:out_0_valid -> timer_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                        // avalon_st_adapter_010:out_0_data -> timer_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                       // timer_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                       // avalon_st_adapter_010:out_0_error -> timer_0_s1_agent:rdata_fifo_sink_error
	wire          timer_1_s1_agent_rdata_fifo_src_valid;                                                   // timer_1_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] timer_1_s1_agent_rdata_fifo_src_data;                                                    // timer_1_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          timer_1_s1_agent_rdata_fifo_src_ready;                                                   // avalon_st_adapter_011:in_0_ready -> timer_1_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                       // avalon_st_adapter_011:out_0_valid -> timer_1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                        // avalon_st_adapter_011:out_0_data -> timer_1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                       // timer_1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                       // avalon_st_adapter_011:out_0_error -> timer_1_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (19),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (19),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) nios_ii_processor_data_master_translator (
		.clk                    (clk_0_clk_clk),                                                                    //                       clk.clk
		.reset                  (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios_ii_processor_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios_ii_processor_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios_ii_processor_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios_ii_processor_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios_ii_processor_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios_ii_processor_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios_ii_processor_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios_ii_processor_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios_ii_processor_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios_ii_processor_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios_ii_processor_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (NIOS_II_Processor_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (NIOS_II_Processor_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (NIOS_II_Processor_data_master_byteenable),                                         //                          .byteenable
		.av_read                (NIOS_II_Processor_data_master_read),                                               //                          .read
		.av_readdata            (NIOS_II_Processor_data_master_readdata),                                           //                          .readdata
		.av_write               (NIOS_II_Processor_data_master_write),                                              //                          .write
		.av_writedata           (NIOS_II_Processor_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (NIOS_II_Processor_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                             //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                             //               (terminated)
		.av_begintransfer       (1'b0),                                                                             //               (terminated)
		.av_chipselect          (1'b0),                                                                             //               (terminated)
		.av_readdatavalid       (),                                                                                 //               (terminated)
		.av_lock                (1'b0),                                                                             //               (terminated)
		.uav_clken              (),                                                                                 //               (terminated)
		.av_clken               (1'b1),                                                                             //               (terminated)
		.uav_response           (2'b00),                                                                            //               (terminated)
		.av_response            (),                                                                                 //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                             //               (terminated)
		.av_writeresponsevalid  ()                                                                                  //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (19),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (19),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios_ii_processor_instruction_master_translator (
		.clk                    (clk_0_clk_clk),                                                                           //                       clk.clk
		.reset                  (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (NIOS_II_Processor_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (NIOS_II_Processor_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (NIOS_II_Processor_instruction_master_read),                                               //                          .read
		.av_readdata            (NIOS_II_Processor_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                                    //               (terminated)
		.av_byteenable          (4'b1111),                                                                                 //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                    //               (terminated)
		.av_begintransfer       (1'b0),                                                                                    //               (terminated)
		.av_chipselect          (1'b0),                                                                                    //               (terminated)
		.av_readdatavalid       (),                                                                                        //               (terminated)
		.av_write               (1'b0),                                                                                    //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                                    //               (terminated)
		.av_lock                (1'b0),                                                                                    //               (terminated)
		.av_debugaccess         (1'b0),                                                                                    //               (terminated)
		.uav_clken              (),                                                                                        //               (terminated)
		.av_clken               (1'b1),                                                                                    //               (terminated)
		.uav_response           (2'b00),                                                                                   //               (terminated)
		.av_response            (),                                                                                        //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                    //               (terminated)
		.av_writeresponsevalid  ()                                                                                         //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),           //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),          //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),      //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (JTAG_UART_avalon_jtag_slave_address),                 //      avalon_anti_slave_0.address
		.av_write               (JTAG_UART_avalon_jtag_slave_write),                   //                         .write
		.av_read                (JTAG_UART_avalon_jtag_slave_read),                    //                         .read
		.av_readdata            (JTAG_UART_avalon_jtag_slave_readdata),                //                         .readdata
		.av_writedata           (JTAG_UART_avalon_jtag_slave_writedata),               //                         .writedata
		.av_waitrequest         (JTAG_UART_avalon_jtag_slave_waitrequest),             //                         .waitrequest
		.av_chipselect          (JTAG_UART_avalon_jtag_slave_chipselect),              //                         .chipselect
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lcd_avalon_lcd_slave_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (lcd_avalon_lcd_slave_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (lcd_avalon_lcd_slave_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (lcd_avalon_lcd_slave_agent_m0_read),                  //                         .read
		.uav_write              (lcd_avalon_lcd_slave_agent_m0_write),                 //                         .write
		.uav_waitrequest        (lcd_avalon_lcd_slave_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (lcd_avalon_lcd_slave_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (lcd_avalon_lcd_slave_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (lcd_avalon_lcd_slave_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (lcd_avalon_lcd_slave_agent_m0_writedata),             //                         .writedata
		.uav_lock               (lcd_avalon_lcd_slave_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (lcd_avalon_lcd_slave_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (LCD_avalon_lcd_slave_address),                        //      avalon_anti_slave_0.address
		.av_write               (LCD_avalon_lcd_slave_write),                          //                         .write
		.av_read                (LCD_avalon_lcd_slave_read),                           //                         .read
		.av_readdata            (LCD_avalon_lcd_slave_readdata),                       //                         .readdata
		.av_writedata           (LCD_avalon_lcd_slave_writedata),                      //                         .writedata
		.av_waitrequest         (LCD_avalon_lcd_slave_waitrequest),                    //                         .waitrequest
		.av_chipselect          (LCD_avalon_lcd_slave_chipselect),                     //                         .chipselect
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sw_sliders_avalon_parallel_port_slave_translator (
		.clk                    (clk_0_clk_clk),                                                //                      clk.clk
		.reset                  (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),          //                    reset.reset
		.uav_address            (sw_sliders_avalon_parallel_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sw_sliders_avalon_parallel_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sw_sliders_avalon_parallel_port_slave_agent_m0_read),          //                         .read
		.uav_write              (sw_sliders_avalon_parallel_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sw_sliders_avalon_parallel_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sw_sliders_avalon_parallel_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sw_sliders_avalon_parallel_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sw_sliders_avalon_parallel_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sw_sliders_avalon_parallel_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sw_sliders_avalon_parallel_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sw_sliders_avalon_parallel_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (SW_SLIDERS_avalon_parallel_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (SW_SLIDERS_avalon_parallel_port_slave_write),                  //                         .write
		.av_read                (SW_SLIDERS_avalon_parallel_port_slave_read),                   //                         .read
		.av_readdata            (SW_SLIDERS_avalon_parallel_port_slave_readdata),               //                         .readdata
		.av_writedata           (SW_SLIDERS_avalon_parallel_port_slave_writedata),              //                         .writedata
		.av_byteenable          (SW_SLIDERS_avalon_parallel_port_slave_byteenable),             //                         .byteenable
		.av_chipselect          (SW_SLIDERS_avalon_parallel_port_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) leds_green_avalon_parallel_port_slave_translator (
		.clk                    (clk_0_clk_clk),                                                //                      clk.clk
		.reset                  (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),          //                    reset.reset
		.uav_address            (leds_green_avalon_parallel_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (leds_green_avalon_parallel_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (leds_green_avalon_parallel_port_slave_agent_m0_read),          //                         .read
		.uav_write              (leds_green_avalon_parallel_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (leds_green_avalon_parallel_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (leds_green_avalon_parallel_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (leds_green_avalon_parallel_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (leds_green_avalon_parallel_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (leds_green_avalon_parallel_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (leds_green_avalon_parallel_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (leds_green_avalon_parallel_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (LEDS_GREEN_avalon_parallel_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (LEDS_GREEN_avalon_parallel_port_slave_write),                  //                         .write
		.av_read                (LEDS_GREEN_avalon_parallel_port_slave_read),                   //                         .read
		.av_readdata            (LEDS_GREEN_avalon_parallel_port_slave_readdata),               //                         .readdata
		.av_writedata           (LEDS_GREEN_avalon_parallel_port_slave_writedata),              //                         .writedata
		.av_byteenable          (LEDS_GREEN_avalon_parallel_port_slave_byteenable),             //                         .byteenable
		.av_chipselect          (LEDS_GREEN_avalon_parallel_port_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) leds_red_avalon_parallel_port_slave_translator (
		.clk                    (clk_0_clk_clk),                                              //                      clk.clk
		.reset                  (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (leds_red_avalon_parallel_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (leds_red_avalon_parallel_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (leds_red_avalon_parallel_port_slave_agent_m0_read),          //                         .read
		.uav_write              (leds_red_avalon_parallel_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (leds_red_avalon_parallel_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (leds_red_avalon_parallel_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (leds_red_avalon_parallel_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (leds_red_avalon_parallel_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (leds_red_avalon_parallel_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (leds_red_avalon_parallel_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (leds_red_avalon_parallel_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (LEDS_RED_avalon_parallel_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (LEDS_RED_avalon_parallel_port_slave_write),                  //                         .write
		.av_read                (LEDS_RED_avalon_parallel_port_slave_read),                   //                         .read
		.av_readdata            (LEDS_RED_avalon_parallel_port_slave_readdata),               //                         .readdata
		.av_writedata           (LEDS_RED_avalon_parallel_port_slave_writedata),              //                         .writedata
		.av_byteenable          (LEDS_RED_avalon_parallel_port_slave_byteenable),             //                         .byteenable
		.av_chipselect          (LEDS_RED_avalon_parallel_port_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex_3_avalon_parallel_port_slave_translator (
		.clk                    (clk_0_clk_clk),                                           //                      clk.clk
		.reset                  (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (hex_3_avalon_parallel_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (hex_3_avalon_parallel_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (hex_3_avalon_parallel_port_slave_agent_m0_read),          //                         .read
		.uav_write              (hex_3_avalon_parallel_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (hex_3_avalon_parallel_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (hex_3_avalon_parallel_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (hex_3_avalon_parallel_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (hex_3_avalon_parallel_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (hex_3_avalon_parallel_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (hex_3_avalon_parallel_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (hex_3_avalon_parallel_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (HEX_3_avalon_parallel_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (HEX_3_avalon_parallel_port_slave_write),                  //                         .write
		.av_read                (HEX_3_avalon_parallel_port_slave_read),                   //                         .read
		.av_readdata            (HEX_3_avalon_parallel_port_slave_readdata),               //                         .readdata
		.av_writedata           (HEX_3_avalon_parallel_port_slave_writedata),              //                         .writedata
		.av_byteenable          (HEX_3_avalon_parallel_port_slave_byteenable),             //                         .byteenable
		.av_chipselect          (HEX_3_avalon_parallel_port_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex_7_avalon_parallel_port_slave_translator (
		.clk                    (clk_0_clk_clk),                                           //                      clk.clk
		.reset                  (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (hex_7_avalon_parallel_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (hex_7_avalon_parallel_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (hex_7_avalon_parallel_port_slave_agent_m0_read),          //                         .read
		.uav_write              (hex_7_avalon_parallel_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (hex_7_avalon_parallel_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (hex_7_avalon_parallel_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (hex_7_avalon_parallel_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (hex_7_avalon_parallel_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (hex_7_avalon_parallel_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (hex_7_avalon_parallel_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (hex_7_avalon_parallel_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (HEX_7_avalon_parallel_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (HEX_7_avalon_parallel_port_slave_write),                  //                         .write
		.av_read                (HEX_7_avalon_parallel_port_slave_read),                   //                         .read
		.av_readdata            (HEX_7_avalon_parallel_port_slave_readdata),               //                         .readdata
		.av_writedata           (HEX_7_avalon_parallel_port_slave_writedata),              //                         .writedata
		.av_byteenable          (HEX_7_avalon_parallel_port_slave_byteenable),             //                         .byteenable
		.av_chipselect          (HEX_7_avalon_parallel_port_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pushbuttons_avalon_parallel_port_slave_translator (
		.clk                    (clk_0_clk_clk),                                                 //                      clk.clk
		.reset                  (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),           //                    reset.reset
		.uav_address            (pushbuttons_avalon_parallel_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (pushbuttons_avalon_parallel_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (pushbuttons_avalon_parallel_port_slave_agent_m0_read),          //                         .read
		.uav_write              (pushbuttons_avalon_parallel_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (pushbuttons_avalon_parallel_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (pushbuttons_avalon_parallel_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (pushbuttons_avalon_parallel_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (pushbuttons_avalon_parallel_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (pushbuttons_avalon_parallel_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (pushbuttons_avalon_parallel_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (pushbuttons_avalon_parallel_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Pushbuttons_avalon_parallel_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Pushbuttons_avalon_parallel_port_slave_write),                  //                         .write
		.av_read                (Pushbuttons_avalon_parallel_port_slave_read),                   //                         .read
		.av_readdata            (Pushbuttons_avalon_parallel_port_slave_readdata),               //                         .readdata
		.av_writedata           (Pushbuttons_avalon_parallel_port_slave_writedata),              //                         .writedata
		.av_byteenable          (Pushbuttons_avalon_parallel_port_slave_byteenable),             //                         .byteenable
		.av_chipselect          (Pushbuttons_avalon_parallel_port_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                              //              (terminated)
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_burstcount          (),                                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                                          //              (terminated)
		.av_waitrequest         (1'b0),                                                          //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios_ii_processor_debug_mem_slave_translator (
		.clk                    (clk_0_clk_clk),                                            //                      clk.clk
		.reset                  (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios_ii_processor_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios_ii_processor_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios_ii_processor_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios_ii_processor_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios_ii_processor_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios_ii_processor_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios_ii_processor_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios_ii_processor_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios_ii_processor_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios_ii_processor_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios_ii_processor_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (NIOS_II_Processor_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (NIOS_II_Processor_debug_mem_slave_write),                  //                         .write
		.av_read                (NIOS_II_Processor_debug_mem_slave_read),                   //                         .read
		.av_readdata            (NIOS_II_Processor_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (NIOS_II_Processor_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (NIOS_II_Processor_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (NIOS_II_Processor_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (NIOS_II_Processor_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                         //              (terminated)
		.av_burstcount          (),                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                     //              (terminated)
		.av_writebyteenable     (),                                                         //              (terminated)
		.av_lock                (),                                                         //              (terminated)
		.av_chipselect          (),                                                         //              (terminated)
		.av_clken               (),                                                         //              (terminated)
		.uav_clken              (1'b0),                                                     //              (terminated)
		.av_outputenable        (),                                                         //              (terminated)
		.uav_response           (),                                                         //              (terminated)
		.av_response            (2'b00),                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (onchip_memory_s1_agent_m0_read),                      //                         .read
		.uav_write              (onchip_memory_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (onchip_memory_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (onchip_memory_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (onchip_memory_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (onchip_memory_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (onchip_memory_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (onchip_memory_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (onchip_memory_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (OnChip_Memory_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (OnChip_Memory_s1_write),                              //                         .write
		.av_readdata            (OnChip_Memory_s1_readdata),                           //                         .readdata
		.av_writedata           (OnChip_Memory_s1_writedata),                          //                         .writedata
		.av_byteenable          (OnChip_Memory_s1_byteenable),                         //                         .byteenable
		.av_chipselect          (OnChip_Memory_s1_chipselect),                         //                         .chipselect
		.av_clken               (OnChip_Memory_s1_clken),                              //                         .clken
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_0_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_0_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (timer_0_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (timer_0_s1_agent_m0_read),                            //                         .read
		.uav_write              (timer_0_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (timer_0_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (timer_0_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (timer_0_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (timer_0_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (timer_0_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (timer_0_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (timer_0_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (timer_0_s1_address),                                  //      avalon_anti_slave_0.address
		.av_write               (timer_0_s1_write),                                    //                         .write
		.av_readdata            (timer_0_s1_readdata),                                 //                         .readdata
		.av_writedata           (timer_0_s1_writedata),                                //                         .writedata
		.av_chipselect          (timer_0_s1_chipselect),                               //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_1_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_1_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (timer_1_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (timer_1_s1_agent_m0_read),                            //                         .read
		.uav_write              (timer_1_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (timer_1_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (timer_1_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (timer_1_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (timer_1_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (timer_1_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (timer_1_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (timer_1_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (timer_1_s1_address),                                  //      avalon_anti_slave_0.address
		.av_write               (timer_1_s1_write),                                    //                         .write
		.av_readdata            (timer_1_s1_readdata),                                 //                         .readdata
		.av_writedata           (timer_1_s1_writedata),                                //                         .writedata
		.av_chipselect          (timer_1_s1_chipselect),                               //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_QOS_H                 (76),
		.PKT_QOS_L                 (76),
		.PKT_DATA_SIDEBAND_H       (74),
		.PKT_DATA_SIDEBAND_L       (74),
		.PKT_ADDR_SIDEBAND_H       (73),
		.PKT_ADDR_SIDEBAND_L       (73),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_CACHE_H               (92),
		.PKT_CACHE_L               (89),
		.PKT_THREAD_ID_H           (85),
		.PKT_THREAD_ID_L           (85),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_EXCLUSIVE       (60),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.ST_DATA_W                 (98),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios_ii_processor_data_master_agent (
		.clk                   (clk_0_clk_clk),                                                                    //       clk.clk
		.reset                 (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios_ii_processor_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios_ii_processor_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios_ii_processor_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios_ii_processor_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios_ii_processor_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios_ii_processor_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios_ii_processor_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios_ii_processor_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios_ii_processor_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios_ii_processor_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios_ii_processor_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios_ii_processor_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios_ii_processor_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios_ii_processor_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios_ii_processor_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios_ii_processor_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                                //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                                 //          .data
		.rp_channel            (rsp_mux_src_channel),                                                              //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                        //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                          //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                                //          .ready
		.av_response           (),                                                                                 // (terminated)
		.av_writeresponsevalid ()                                                                                  // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_QOS_H                 (76),
		.PKT_QOS_L                 (76),
		.PKT_DATA_SIDEBAND_H       (74),
		.PKT_DATA_SIDEBAND_L       (74),
		.PKT_ADDR_SIDEBAND_H       (73),
		.PKT_ADDR_SIDEBAND_L       (73),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_CACHE_H               (92),
		.PKT_CACHE_L               (89),
		.PKT_THREAD_ID_H           (85),
		.PKT_THREAD_ID_L           (85),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_EXCLUSIVE       (60),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.ST_DATA_W                 (98),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios_ii_processor_instruction_master_agent (
		.clk                   (clk_0_clk_clk),                                                                           //       clk.clk
		.reset                 (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios_ii_processor_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios_ii_processor_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios_ii_processor_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios_ii_processor_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios_ii_processor_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                                   //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                                    //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                                 //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                           //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                             //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                                   //          .ready
		.av_response           (),                                                                                        // (terminated)
		.av_writeresponsevalid ()                                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (clk_0_clk_clk),                                                //             clk.clk
		.reset                   (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                          //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                //       clk.clk
		.reset             (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (70),
		.PKT_ORI_BURST_SIZE_L      (68),
		.PKT_RESPONSE_STATUS_H     (67),
		.PKT_RESPONSE_STATUS_L     (66),
		.PKT_BURST_SIZE_H          (43),
		.PKT_BURST_SIZE_L          (41),
		.PKT_TRANS_LOCK            (32),
		.PKT_BEGIN_BURST           (48),
		.PKT_PROTECTION_H          (61),
		.PKT_PROTECTION_L          (59),
		.PKT_BURSTWRAP_H           (40),
		.PKT_BURSTWRAP_L           (38),
		.PKT_BYTE_CNT_H            (37),
		.PKT_BYTE_CNT_L            (34),
		.PKT_ADDR_H                (27),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (28),
		.PKT_TRANS_POSTED          (29),
		.PKT_TRANS_WRITE           (30),
		.PKT_TRANS_READ            (31),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (53),
		.PKT_SRC_ID_L              (50),
		.PKT_DEST_ID_H             (57),
		.PKT_DEST_ID_L             (54),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (71),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lcd_avalon_lcd_slave_agent (
		.clk                     (clk_0_clk_clk),                                            //             clk.clk
		.reset                   (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (lcd_avalon_lcd_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (lcd_avalon_lcd_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (lcd_avalon_lcd_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (lcd_avalon_lcd_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (lcd_avalon_lcd_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (lcd_avalon_lcd_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (lcd_avalon_lcd_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (lcd_avalon_lcd_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (lcd_avalon_lcd_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (lcd_avalon_lcd_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (lcd_avalon_lcd_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (lcd_avalon_lcd_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (lcd_avalon_lcd_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (lcd_avalon_lcd_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (lcd_avalon_lcd_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (lcd_avalon_lcd_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (lcd_avalon_lcd_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (lcd_avalon_lcd_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (lcd_avalon_lcd_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (lcd_avalon_lcd_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (lcd_avalon_lcd_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (lcd_avalon_lcd_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (lcd_avalon_lcd_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (lcd_avalon_lcd_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (lcd_avalon_lcd_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (lcd_avalon_lcd_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (lcd_avalon_lcd_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (lcd_avalon_lcd_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (lcd_avalon_lcd_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (lcd_avalon_lcd_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (lcd_avalon_lcd_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (lcd_avalon_lcd_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (lcd_avalon_lcd_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lcd_avalon_lcd_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (lcd_avalon_lcd_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (72),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lcd_avalon_lcd_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                         //       clk.clk
		.reset             (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (lcd_avalon_lcd_slave_agent_rf_source_data),             //        in.data
		.in_valid          (lcd_avalon_lcd_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (lcd_avalon_lcd_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lcd_avalon_lcd_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lcd_avalon_lcd_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lcd_avalon_lcd_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lcd_avalon_lcd_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lcd_avalon_lcd_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lcd_avalon_lcd_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lcd_avalon_lcd_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sw_sliders_avalon_parallel_port_slave_agent (
		.clk                     (clk_0_clk_clk),                                                          //             clk.clk
		.reset                   (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (sw_sliders_avalon_parallel_port_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sw_sliders_avalon_parallel_port_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sw_sliders_avalon_parallel_port_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sw_sliders_avalon_parallel_port_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sw_sliders_avalon_parallel_port_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sw_sliders_avalon_parallel_port_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sw_sliders_avalon_parallel_port_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sw_sliders_avalon_parallel_port_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sw_sliders_avalon_parallel_port_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sw_sliders_avalon_parallel_port_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sw_sliders_avalon_parallel_port_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sw_sliders_avalon_parallel_port_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sw_sliders_avalon_parallel_port_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sw_sliders_avalon_parallel_port_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sw_sliders_avalon_parallel_port_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sw_sliders_avalon_parallel_port_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                                  //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                                  //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                                   //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                            //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                                //                .channel
		.rf_sink_ready           (sw_sliders_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sw_sliders_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sw_sliders_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sw_sliders_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sw_sliders_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sw_sliders_avalon_parallel_port_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sw_sliders_avalon_parallel_port_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sw_sliders_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sw_sliders_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sw_sliders_avalon_parallel_port_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                      //                .error
		.rdata_fifo_src_ready    (sw_sliders_avalon_parallel_port_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sw_sliders_avalon_parallel_port_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sw_sliders_avalon_parallel_port_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sw_sliders_avalon_parallel_port_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                          //       clk.clk
		.reset             (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (sw_sliders_avalon_parallel_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sw_sliders_avalon_parallel_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sw_sliders_avalon_parallel_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sw_sliders_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sw_sliders_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sw_sliders_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sw_sliders_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sw_sliders_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sw_sliders_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sw_sliders_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated)
		.csr_read          (1'b0),                                                                   // (terminated)
		.csr_write         (1'b0),                                                                   // (terminated)
		.csr_readdata      (),                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated)
		.almost_full_data  (),                                                                       // (terminated)
		.almost_empty_data (),                                                                       // (terminated)
		.in_empty          (1'b0),                                                                   // (terminated)
		.out_empty         (),                                                                       // (terminated)
		.in_error          (1'b0),                                                                   // (terminated)
		.out_error         (),                                                                       // (terminated)
		.in_channel        (1'b0),                                                                   // (terminated)
		.out_channel       ()                                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) leds_green_avalon_parallel_port_slave_agent (
		.clk                     (clk_0_clk_clk),                                                          //             clk.clk
		.reset                   (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (leds_green_avalon_parallel_port_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (leds_green_avalon_parallel_port_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (leds_green_avalon_parallel_port_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (leds_green_avalon_parallel_port_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (leds_green_avalon_parallel_port_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (leds_green_avalon_parallel_port_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (leds_green_avalon_parallel_port_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (leds_green_avalon_parallel_port_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (leds_green_avalon_parallel_port_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (leds_green_avalon_parallel_port_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (leds_green_avalon_parallel_port_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (leds_green_avalon_parallel_port_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (leds_green_avalon_parallel_port_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (leds_green_avalon_parallel_port_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (leds_green_avalon_parallel_port_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (leds_green_avalon_parallel_port_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                                  //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                                  //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                                   //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                            //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                                //                .channel
		.rf_sink_ready           (leds_green_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (leds_green_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (leds_green_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (leds_green_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (leds_green_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (leds_green_avalon_parallel_port_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (leds_green_avalon_parallel_port_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (leds_green_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (leds_green_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (leds_green_avalon_parallel_port_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                                      //                .error
		.rdata_fifo_src_ready    (leds_green_avalon_parallel_port_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (leds_green_avalon_parallel_port_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (leds_green_avalon_parallel_port_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leds_green_avalon_parallel_port_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                          //       clk.clk
		.reset             (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (leds_green_avalon_parallel_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (leds_green_avalon_parallel_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (leds_green_avalon_parallel_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (leds_green_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (leds_green_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (leds_green_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (leds_green_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (leds_green_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (leds_green_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (leds_green_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated)
		.csr_read          (1'b0),                                                                   // (terminated)
		.csr_write         (1'b0),                                                                   // (terminated)
		.csr_readdata      (),                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated)
		.almost_full_data  (),                                                                       // (terminated)
		.almost_empty_data (),                                                                       // (terminated)
		.in_empty          (1'b0),                                                                   // (terminated)
		.out_empty         (),                                                                       // (terminated)
		.in_error          (1'b0),                                                                   // (terminated)
		.out_error         (),                                                                       // (terminated)
		.in_channel        (1'b0),                                                                   // (terminated)
		.out_channel       ()                                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) leds_red_avalon_parallel_port_slave_agent (
		.clk                     (clk_0_clk_clk),                                                        //             clk.clk
		.reset                   (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (leds_red_avalon_parallel_port_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (leds_red_avalon_parallel_port_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (leds_red_avalon_parallel_port_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (leds_red_avalon_parallel_port_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (leds_red_avalon_parallel_port_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (leds_red_avalon_parallel_port_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (leds_red_avalon_parallel_port_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (leds_red_avalon_parallel_port_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (leds_red_avalon_parallel_port_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (leds_red_avalon_parallel_port_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (leds_red_avalon_parallel_port_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (leds_red_avalon_parallel_port_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (leds_red_avalon_parallel_port_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (leds_red_avalon_parallel_port_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (leds_red_avalon_parallel_port_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (leds_red_avalon_parallel_port_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                                //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                                //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                                 //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                          //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                              //                .channel
		.rf_sink_ready           (leds_red_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (leds_red_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (leds_red_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (leds_red_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (leds_red_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (leds_red_avalon_parallel_port_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (leds_red_avalon_parallel_port_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (leds_red_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (leds_red_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (leds_red_avalon_parallel_port_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (leds_red_avalon_parallel_port_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (leds_red_avalon_parallel_port_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (leds_red_avalon_parallel_port_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leds_red_avalon_parallel_port_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                        //       clk.clk
		.reset             (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (leds_red_avalon_parallel_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (leds_red_avalon_parallel_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (leds_red_avalon_parallel_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (leds_red_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (leds_red_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (leds_red_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (leds_red_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (leds_red_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (leds_red_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (leds_red_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                // (terminated)
		.csr_read          (1'b0),                                                                 // (terminated)
		.csr_write         (1'b0),                                                                 // (terminated)
		.csr_readdata      (),                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated)
		.almost_full_data  (),                                                                     // (terminated)
		.almost_empty_data (),                                                                     // (terminated)
		.in_empty          (1'b0),                                                                 // (terminated)
		.out_empty         (),                                                                     // (terminated)
		.in_error          (1'b0),                                                                 // (terminated)
		.out_error         (),                                                                     // (terminated)
		.in_channel        (1'b0),                                                                 // (terminated)
		.out_channel       ()                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex_3_avalon_parallel_port_slave_agent (
		.clk                     (clk_0_clk_clk),                                                     //             clk.clk
		.reset                   (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (hex_3_avalon_parallel_port_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex_3_avalon_parallel_port_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex_3_avalon_parallel_port_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex_3_avalon_parallel_port_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex_3_avalon_parallel_port_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex_3_avalon_parallel_port_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex_3_avalon_parallel_port_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex_3_avalon_parallel_port_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex_3_avalon_parallel_port_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex_3_avalon_parallel_port_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (hex_3_avalon_parallel_port_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex_3_avalon_parallel_port_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex_3_avalon_parallel_port_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (hex_3_avalon_parallel_port_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (hex_3_avalon_parallel_port_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex_3_avalon_parallel_port_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                             //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                             //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                              //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                       //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                           //                .channel
		.rf_sink_ready           (hex_3_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex_3_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex_3_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex_3_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex_3_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex_3_avalon_parallel_port_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex_3_avalon_parallel_port_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex_3_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex_3_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex_3_avalon_parallel_port_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (hex_3_avalon_parallel_port_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex_3_avalon_parallel_port_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex_3_avalon_parallel_port_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex_3_avalon_parallel_port_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                     //       clk.clk
		.reset             (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (hex_3_avalon_parallel_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (hex_3_avalon_parallel_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (hex_3_avalon_parallel_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex_3_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex_3_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex_3_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex_3_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex_3_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex_3_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex_3_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex_7_avalon_parallel_port_slave_agent (
		.clk                     (clk_0_clk_clk),                                                     //             clk.clk
		.reset                   (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (hex_7_avalon_parallel_port_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex_7_avalon_parallel_port_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex_7_avalon_parallel_port_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex_7_avalon_parallel_port_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex_7_avalon_parallel_port_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex_7_avalon_parallel_port_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex_7_avalon_parallel_port_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex_7_avalon_parallel_port_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex_7_avalon_parallel_port_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex_7_avalon_parallel_port_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (hex_7_avalon_parallel_port_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex_7_avalon_parallel_port_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex_7_avalon_parallel_port_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (hex_7_avalon_parallel_port_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (hex_7_avalon_parallel_port_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex_7_avalon_parallel_port_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                             //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                             //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                              //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                                       //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                           //                .channel
		.rf_sink_ready           (hex_7_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex_7_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex_7_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex_7_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex_7_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex_7_avalon_parallel_port_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex_7_avalon_parallel_port_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex_7_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex_7_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex_7_avalon_parallel_port_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (hex_7_avalon_parallel_port_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex_7_avalon_parallel_port_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex_7_avalon_parallel_port_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex_7_avalon_parallel_port_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                     //       clk.clk
		.reset             (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (hex_7_avalon_parallel_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (hex_7_avalon_parallel_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (hex_7_avalon_parallel_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex_7_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex_7_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex_7_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex_7_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex_7_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex_7_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex_7_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pushbuttons_avalon_parallel_port_slave_agent (
		.clk                     (clk_0_clk_clk),                                                           //             clk.clk
		.reset                   (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),                     //       clk_reset.reset
		.m0_address              (pushbuttons_avalon_parallel_port_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pushbuttons_avalon_parallel_port_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pushbuttons_avalon_parallel_port_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pushbuttons_avalon_parallel_port_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pushbuttons_avalon_parallel_port_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (pushbuttons_avalon_parallel_port_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pushbuttons_avalon_parallel_port_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pushbuttons_avalon_parallel_port_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (pushbuttons_avalon_parallel_port_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pushbuttons_avalon_parallel_port_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (pushbuttons_avalon_parallel_port_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (pushbuttons_avalon_parallel_port_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pushbuttons_avalon_parallel_port_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (pushbuttons_avalon_parallel_port_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (pushbuttons_avalon_parallel_port_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (pushbuttons_avalon_parallel_port_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                                   //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                                   //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                                    //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                                             //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                                                 //                .channel
		.rf_sink_ready           (pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pushbuttons_avalon_parallel_port_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pushbuttons_avalon_parallel_port_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pushbuttons_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pushbuttons_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pushbuttons_avalon_parallel_port_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                                       //                .error
		.rdata_fifo_src_ready    (pushbuttons_avalon_parallel_port_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pushbuttons_avalon_parallel_port_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pushbuttons_avalon_parallel_port_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                           //       clk.clk
		.reset             (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (pushbuttons_avalon_parallel_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (pushbuttons_avalon_parallel_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (pushbuttons_avalon_parallel_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pushbuttons_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pushbuttons_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios_ii_processor_debug_mem_slave_agent (
		.clk                     (clk_0_clk_clk),                                                      //             clk.clk
		.reset                   (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios_ii_processor_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios_ii_processor_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios_ii_processor_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios_ii_processor_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios_ii_processor_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios_ii_processor_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios_ii_processor_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios_ii_processor_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios_ii_processor_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios_ii_processor_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios_ii_processor_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios_ii_processor_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios_ii_processor_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios_ii_processor_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios_ii_processor_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios_ii_processor_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                                            //                .channel
		.rf_sink_ready           (nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios_ii_processor_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios_ii_processor_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios_ii_processor_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios_ii_processor_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios_ii_processor_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (nios_ii_processor_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios_ii_processor_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios_ii_processor_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_ii_processor_debug_mem_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                      //       clk.clk
		.reset             (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios_ii_processor_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios_ii_processor_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios_ii_processor_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios_ii_processor_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios_ii_processor_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (133),
		.PKT_ORI_BURST_SIZE_L      (131),
		.PKT_RESPONSE_STATUS_H     (130),
		.PKT_RESPONSE_STATUS_L     (129),
		.PKT_BURST_SIZE_H          (106),
		.PKT_BURST_SIZE_L          (104),
		.PKT_TRANS_LOCK            (95),
		.PKT_BEGIN_BURST           (111),
		.PKT_PROTECTION_H          (124),
		.PKT_PROTECTION_L          (122),
		.PKT_BURSTWRAP_H           (103),
		.PKT_BURSTWRAP_L           (101),
		.PKT_BYTE_CNT_H            (100),
		.PKT_BYTE_CNT_L            (97),
		.PKT_ADDR_H                (90),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (91),
		.PKT_TRANS_POSTED          (92),
		.PKT_TRANS_WRITE           (93),
		.PKT_TRANS_READ            (94),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (116),
		.PKT_SRC_ID_L              (113),
		.PKT_DEST_ID_H             (120),
		.PKT_DEST_ID_L             (117),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (134),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (onchip_memory_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (onchip_memory_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (onchip_memory_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (onchip_memory_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (onchip_memory_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (onchip_memory_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (onchip_memory_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (onchip_memory_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (onchip_memory_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (onchip_memory_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (onchip_memory_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (onchip_memory_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (onchip_memory_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (onchip_memory_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (onchip_memory_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (onchip_memory_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (onchip_memory_s1_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (onchip_memory_s1_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (onchip_memory_s1_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (onchip_memory_s1_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (onchip_memory_s1_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (onchip_memory_s1_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (onchip_memory_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (onchip_memory_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (onchip_memory_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (onchip_memory_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (onchip_memory_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (onchip_memory_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (onchip_memory_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (onchip_memory_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (onchip_memory_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (onchip_memory_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (onchip_memory_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (135),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (onchip_memory_s1_agent_rf_source_data),               //        in.data
		.in_valid          (onchip_memory_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (onchip_memory_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (onchip_memory_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (onchip_memory_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (onchip_memory_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (onchip_memory_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (onchip_memory_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (onchip_memory_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (onchip_memory_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_0_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (timer_0_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (timer_0_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (timer_0_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (timer_0_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (timer_0_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (timer_0_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (timer_0_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (timer_0_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (timer_0_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (timer_0_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (timer_0_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (timer_0_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (timer_0_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (timer_0_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (timer_0_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                             //                .channel
		.rf_sink_ready           (timer_0_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (timer_0_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (timer_0_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (timer_0_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (timer_0_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (timer_0_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (timer_0_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (timer_0_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (timer_0_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (timer_0_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (timer_0_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_0_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (timer_0_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_0_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (timer_0_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (timer_0_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (timer_0_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (timer_0_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (timer_0_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (timer_0_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (timer_0_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (timer_0_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (timer_0_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_1_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_1_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (timer_1_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (timer_1_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (timer_1_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (timer_1_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (timer_1_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (timer_1_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (timer_1_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (timer_1_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (timer_1_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (timer_1_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (timer_1_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (timer_1_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (timer_1_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (timer_1_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (timer_1_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_011_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                             //                .channel
		.rf_sink_ready           (timer_1_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (timer_1_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (timer_1_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (timer_1_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (timer_1_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (timer_1_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (timer_1_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (timer_1_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (timer_1_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (timer_1_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (timer_1_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_1_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (timer_1_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_1_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (timer_1_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (timer_1_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (timer_1_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (timer_1_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (timer_1_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (timer_1_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (timer_1_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (timer_1_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (timer_1_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	nios_ii_base_mm_interconnect_0_router router (
		.sink_ready         (nios_ii_processor_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios_ii_processor_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios_ii_processor_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios_ii_processor_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios_ii_processor_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                                     //       src.ready
		.src_valid          (router_src_valid),                                     //          .valid
		.src_data           (router_src_data),                                      //          .data
		.src_channel        (router_src_channel),                                   //          .channel
		.src_startofpacket  (router_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (nios_ii_processor_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios_ii_processor_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios_ii_processor_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios_ii_processor_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios_ii_processor_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                                        //       src.ready
		.src_valid          (router_001_src_valid),                                        //          .valid
		.src_data           (router_001_src_data),                                         //          .data
		.src_channel        (router_001_src_channel),                                      //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                   //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),          //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),          //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),           //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                //       src.ready
		.src_valid          (router_002_src_valid),                                //          .valid
		.src_data           (router_002_src_data),                                 //          .data
		.src_channel        (router_002_src_channel),                              //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                           //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (lcd_avalon_lcd_slave_agent_rp_ready),                 //      sink.ready
		.sink_valid         (lcd_avalon_lcd_slave_agent_rp_valid),                 //          .valid
		.sink_data          (lcd_avalon_lcd_slave_agent_rp_data),                  //          .data
		.sink_startofpacket (lcd_avalon_lcd_slave_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (lcd_avalon_lcd_slave_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                //       src.ready
		.src_valid          (router_003_src_valid),                                //          .valid
		.src_data           (router_003_src_data),                                 //          .data
		.src_channel        (router_003_src_channel),                              //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                           //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (sw_sliders_avalon_parallel_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sw_sliders_avalon_parallel_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (sw_sliders_avalon_parallel_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sw_sliders_avalon_parallel_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sw_sliders_avalon_parallel_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_004_src_ready),                                         //       src.ready
		.src_valid          (router_004_src_valid),                                         //          .valid
		.src_data           (router_004_src_data),                                          //          .data
		.src_channel        (router_004_src_channel),                                       //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                    //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_router_002 router_005 (
		.sink_ready         (leds_green_avalon_parallel_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (leds_green_avalon_parallel_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (leds_green_avalon_parallel_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (leds_green_avalon_parallel_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (leds_green_avalon_parallel_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_005_src_ready),                                         //       src.ready
		.src_valid          (router_005_src_valid),                                         //          .valid
		.src_data           (router_005_src_data),                                          //          .data
		.src_channel        (router_005_src_channel),                                       //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                    //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_router_002 router_006 (
		.sink_ready         (leds_red_avalon_parallel_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (leds_red_avalon_parallel_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (leds_red_avalon_parallel_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (leds_red_avalon_parallel_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (leds_red_avalon_parallel_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_006_src_ready),                                       //       src.ready
		.src_valid          (router_006_src_valid),                                       //          .valid
		.src_data           (router_006_src_data),                                        //          .data
		.src_channel        (router_006_src_channel),                                     //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                  //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_router_002 router_007 (
		.sink_ready         (hex_3_avalon_parallel_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (hex_3_avalon_parallel_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (hex_3_avalon_parallel_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (hex_3_avalon_parallel_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hex_3_avalon_parallel_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_007_src_ready),                                    //       src.ready
		.src_valid          (router_007_src_valid),                                    //          .valid
		.src_data           (router_007_src_data),                                     //          .data
		.src_channel        (router_007_src_channel),                                  //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                               //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_router_002 router_008 (
		.sink_ready         (hex_7_avalon_parallel_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (hex_7_avalon_parallel_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (hex_7_avalon_parallel_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (hex_7_avalon_parallel_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hex_7_avalon_parallel_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_008_src_ready),                                    //       src.ready
		.src_valid          (router_008_src_valid),                                    //          .valid
		.src_data           (router_008_src_data),                                     //          .data
		.src_channel        (router_008_src_channel),                                  //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                               //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_router_002 router_009 (
		.sink_ready         (pushbuttons_avalon_parallel_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (pushbuttons_avalon_parallel_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (pushbuttons_avalon_parallel_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (pushbuttons_avalon_parallel_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pushbuttons_avalon_parallel_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                 //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_009_src_ready),                                          //       src.ready
		.src_valid          (router_009_src_valid),                                          //          .valid
		.src_data           (router_009_src_data),                                           //          .data
		.src_channel        (router_009_src_channel),                                        //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                     //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_router_010 router_010 (
		.sink_ready         (nios_ii_processor_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios_ii_processor_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios_ii_processor_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios_ii_processor_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios_ii_processor_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_010_src_ready),                                     //       src.ready
		.src_valid          (router_010_src_valid),                                     //          .valid
		.src_data           (router_010_src_data),                                      //          .data
		.src_channel        (router_010_src_channel),                                   //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                                //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_router_011 router_011 (
		.sink_ready         (onchip_memory_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (onchip_memory_s1_agent_rp_valid),                     //          .valid
		.sink_data          (onchip_memory_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (onchip_memory_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (onchip_memory_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                                //       src.ready
		.src_valid          (router_011_src_valid),                                //          .valid
		.src_data           (router_011_src_data),                                 //          .data
		.src_channel        (router_011_src_channel),                              //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                           //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_router_010 router_012 (
		.sink_ready         (timer_0_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (timer_0_s1_agent_rp_valid),                           //          .valid
		.sink_data          (timer_0_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (timer_0_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (timer_0_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                                //       src.ready
		.src_valid          (router_012_src_valid),                                //          .valid
		.src_data           (router_012_src_data),                                 //          .data
		.src_channel        (router_012_src_channel),                              //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                           //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_router_010 router_013 (
		.sink_ready         (timer_1_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (timer_1_s1_agent_rp_valid),                           //          .valid
		.sink_data          (timer_1_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (timer_1_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (timer_1_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                                //       src.ready
		.src_valid          (router_013_src_valid),                                //          .valid
		.src_data           (router_013_src_data),                                 //          .data
		.src_channel        (router_013_src_channel),                              //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                           //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (27),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (48),
		.PKT_BYTE_CNT_H            (37),
		.PKT_BYTE_CNT_L            (34),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (43),
		.PKT_BURST_SIZE_L          (41),
		.PKT_BURST_TYPE_H          (45),
		.PKT_BURST_TYPE_L          (44),
		.PKT_BURSTWRAP_H           (40),
		.PKT_BURSTWRAP_L           (38),
		.PKT_TRANS_COMPRESSED_READ (28),
		.PKT_TRANS_WRITE           (30),
		.PKT_TRANS_READ            (31),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (71),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (34),
		.OUT_BURSTWRAP_H           (40),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) lcd_avalon_lcd_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                            //       cr0.clk
		.reset                 (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (lcd_avalon_lcd_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (lcd_avalon_lcd_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (lcd_avalon_lcd_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (lcd_avalon_lcd_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (lcd_avalon_lcd_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (lcd_avalon_lcd_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (lcd_avalon_lcd_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (lcd_avalon_lcd_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (lcd_avalon_lcd_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (lcd_avalon_lcd_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (lcd_avalon_lcd_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (lcd_avalon_lcd_slave_burst_adapter_source0_ready)          //          .ready
	);

	nios_ii_base_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_src_ready),                                    //      sink.ready
		.sink_channel        (router_src_channel),                                  //          .channel
		.sink_data           (router_src_data),                                     //          .data
		.sink_startofpacket  (router_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                              //          .endofpacket
		.sink_valid          (router_src_valid),                                    //          .valid
		.src0_ready          (cmd_demux_src0_ready),                                //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                //          .valid
		.src0_data           (cmd_demux_src0_data),                                 //          .data
		.src0_channel        (cmd_demux_src0_channel),                              //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                          //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                //          .valid
		.src1_data           (cmd_demux_src1_data),                                 //          .data
		.src1_channel        (cmd_demux_src1_channel),                              //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                        //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                          //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                //          .valid
		.src2_data           (cmd_demux_src2_data),                                 //          .data
		.src2_channel        (cmd_demux_src2_channel),                              //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                        //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                          //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                //          .valid
		.src3_data           (cmd_demux_src3_data),                                 //          .data
		.src3_channel        (cmd_demux_src3_channel),                              //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                        //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                          //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                //          .valid
		.src4_data           (cmd_demux_src4_data),                                 //          .data
		.src4_channel        (cmd_demux_src4_channel),                              //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                        //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                          //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                //          .valid
		.src5_data           (cmd_demux_src5_data),                                 //          .data
		.src5_channel        (cmd_demux_src5_channel),                              //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                        //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                          //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                //          .valid
		.src6_data           (cmd_demux_src6_data),                                 //          .data
		.src6_channel        (cmd_demux_src6_channel),                              //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                        //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                          //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                //          .valid
		.src7_data           (cmd_demux_src7_data),                                 //          .data
		.src7_channel        (cmd_demux_src7_channel),                              //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                        //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                          //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                //          .valid
		.src8_data           (cmd_demux_src8_data),                                 //          .data
		.src8_channel        (cmd_demux_src8_channel),                              //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                        //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                          //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                //          .valid
		.src9_data           (cmd_demux_src9_data),                                 //          .data
		.src9_channel        (cmd_demux_src9_channel),                              //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                        //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                          //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                               //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                               //          .valid
		.src10_data          (cmd_demux_src10_data),                                //          .data
		.src10_channel       (cmd_demux_src10_channel),                             //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                       //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                         //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                               //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                               //          .valid
		.src11_data          (cmd_demux_src11_data),                                //          .data
		.src11_channel       (cmd_demux_src11_channel),                             //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                       //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket)                          //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                //      sink.ready
		.sink_channel       (router_001_src_channel),                              //          .channel
		.sink_data          (router_001_src_data),                                 //          .data
		.sink_startofpacket (router_001_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_001_src_valid),                                //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                            //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                            //          .valid
		.src0_data          (cmd_demux_001_src0_data),                             //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                          //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                            //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                            //          .valid
		.src1_data          (cmd_demux_001_src1_data),                             //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                          //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                            //      src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                            //          .valid
		.src2_data          (cmd_demux_001_src2_data),                             //          .data
		.src2_channel       (cmd_demux_001_src2_channel),                          //          .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                      //          .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                            //      src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                            //          .valid
		.src3_data          (cmd_demux_001_src3_data),                             //          .data
		.src3_channel       (cmd_demux_001_src3_channel),                          //          .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                    //          .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket)                       //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_src_valid),                                   //          .valid
		.src_data            (cmd_mux_src_data),                                    //          .data
		.src_channel         (cmd_mux_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                              //          .channel
		.sink0_data          (cmd_demux_src0_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                           //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                               //          .valid
		.src_data            (cmd_mux_001_src_data),                                //          .data
		.src_channel         (cmd_mux_001_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                              //          .channel
		.sink0_data          (cmd_demux_src1_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                           //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                               //          .valid
		.src_data            (cmd_mux_002_src_data),                                //          .data
		.src_channel         (cmd_mux_002_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                              //          .channel
		.sink0_data          (cmd_demux_src2_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                           //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                               //          .valid
		.src_data            (cmd_mux_003_src_data),                                //          .data
		.src_channel         (cmd_mux_003_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                              //          .channel
		.sink0_data          (cmd_demux_src3_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                           //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                               //          .valid
		.src_data            (cmd_mux_004_src_data),                                //          .data
		.src_channel         (cmd_mux_004_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                              //          .channel
		.sink0_data          (cmd_demux_src4_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                           //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                               //          .valid
		.src_data            (cmd_mux_005_src_data),                                //          .data
		.src_channel         (cmd_mux_005_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                              //          .channel
		.sink0_data          (cmd_demux_src5_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                           //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                               //          .valid
		.src_data            (cmd_mux_006_src_data),                                //          .data
		.src_channel         (cmd_mux_006_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                              //          .channel
		.sink0_data          (cmd_demux_src6_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                           //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                               //          .valid
		.src_data            (cmd_mux_007_src_data),                                //          .data
		.src_channel         (cmd_mux_007_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                              //          .channel
		.sink0_data          (cmd_demux_src7_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                           //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_cmd_mux_008 cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                               //          .valid
		.src_data            (cmd_mux_008_src_data),                                //          .data
		.src_channel         (cmd_mux_008_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                              //          .channel
		.sink0_data          (cmd_demux_src8_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),                          //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                            //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                          //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                             //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                       //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_cmd_mux_008 cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                               //          .valid
		.src_data            (cmd_mux_009_src_data),                                //          .data
		.src_channel         (cmd_mux_009_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                              //          .channel
		.sink0_data          (cmd_demux_src9_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket),                          //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                            //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                          //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                             //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                       //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_cmd_mux_008 cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                               //          .valid
		.src_data            (cmd_mux_010_src_data),                                //          .data
		.src_channel         (cmd_mux_010_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                             //          .channel
		.sink0_data          (cmd_demux_src10_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket),                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                            //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                          //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                             //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                       //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_cmd_mux_008 cmd_mux_011 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                               //          .valid
		.src_data            (cmd_mux_011_src_data),                                //          .data
		.src_channel         (cmd_mux_011_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                             //          .channel
		.sink0_data          (cmd_demux_src11_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket),                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                            //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                          //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                             //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)                       //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                //      sink.ready
		.sink_channel       (router_002_src_channel),                              //          .channel
		.sink_data          (router_002_src_data),                                 //          .data
		.sink_startofpacket (router_002_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_002_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                           //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.sink_ready         (lcd_avalon_lcd_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (lcd_avalon_lcd_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (lcd_avalon_lcd_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (lcd_avalon_lcd_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (lcd_avalon_lcd_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (lcd_avalon_lcd_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                 //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                 //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                  //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                               //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                            //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                //      sink.ready
		.sink_channel       (router_004_src_channel),                              //          .channel
		.sink_data          (router_004_src_data),                                 //          .data
		.sink_startofpacket (router_004_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_004_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_002_src0_data),                             //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                       //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                //      sink.ready
		.sink_channel       (router_005_src_channel),                              //          .channel
		.sink_data          (router_005_src_data),                                 //          .data
		.sink_startofpacket (router_005_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_005_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_003_src0_data),                             //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                       //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                //      sink.ready
		.sink_channel       (router_006_src_channel),                              //          .channel
		.sink_data          (router_006_src_data),                                 //          .data
		.sink_startofpacket (router_006_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_006_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_004_src0_data),                             //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                       //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                //      sink.ready
		.sink_channel       (router_007_src_channel),                              //          .channel
		.sink_data          (router_007_src_data),                                 //          .data
		.sink_startofpacket (router_007_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_007_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_005_src0_data),                             //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                       //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                //      sink.ready
		.sink_channel       (router_008_src_channel),                              //          .channel
		.sink_data          (router_008_src_data),                                 //          .data
		.sink_startofpacket (router_008_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_008_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_006_src0_data),                             //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                       //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                //      sink.ready
		.sink_channel       (router_009_src_channel),                              //          .channel
		.sink_data          (router_009_src_data),                                 //          .data
		.sink_startofpacket (router_009_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_009_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_007_src0_data),                             //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                       //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_rsp_demux_008 rsp_demux_008 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                //      sink.ready
		.sink_channel       (router_010_src_channel),                              //          .channel
		.sink_data          (router_010_src_data),                                 //          .data
		.sink_startofpacket (router_010_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_010_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_008_src0_data),                             //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_008_src1_data),                             //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)                       //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_rsp_demux_008 rsp_demux_009 (
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.sink_ready         (onchip_memory_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (onchip_memory_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (onchip_memory_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (onchip_memory_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (onchip_memory_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (onchip_memory_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_009_src0_data),                              //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_009_src1_data),                              //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket)                        //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_rsp_demux_008 rsp_demux_010 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                                //      sink.ready
		.sink_channel       (router_012_src_channel),                              //          .channel
		.sink_data          (router_012_src_data),                                 //          .data
		.sink_startofpacket (router_012_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_012_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_010_src0_data),                             //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_010_src1_data),                             //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)                       //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_rsp_demux_008 rsp_demux_011 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                                //      sink.ready
		.sink_channel       (router_013_src_channel),                              //          .channel
		.sink_data          (router_013_src_data),                                 //          .data
		.sink_startofpacket (router_013_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_013_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_011_src0_data),                             //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_011_src1_data),                             //          .data
		.src1_channel       (rsp_demux_011_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket)                       //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (clk_0_clk_clk),                                       //       clk.clk
		.reset                (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                   //       src.ready
		.src_valid            (rsp_mux_src_valid),                                   //          .valid
		.src_data             (rsp_mux_src_data),                                    //          .data
		.src_channel          (rsp_mux_src_channel),                                 //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                           //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                             //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                                //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                                //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                              //          .channel
		.sink0_data           (rsp_demux_src0_data),                                 //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                        //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                          //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                            //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                            //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                          //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                             //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                    //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                      //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                            //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                            //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                          //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                             //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                    //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                      //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                            //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                            //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                          //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                             //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                    //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                      //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                            //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                            //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                          //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                             //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                    //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                      //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                            //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                            //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                          //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                             //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                    //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                      //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                            //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                            //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                          //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                             //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                    //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                      //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                            //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                            //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                          //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                             //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                    //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                      //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                            //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                            //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                          //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                             //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                    //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                      //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                            //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                            //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                          //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                             //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                    //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                      //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                            //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                            //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                          //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                             //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                    //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                      //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                            //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                            //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                          //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                             //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                    //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket)                       //          .endofpacket
	);

	nios_ii_base_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                               //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                               //          .valid
		.src_data            (rsp_mux_001_src_data),                                //          .data
		.src_channel         (rsp_mux_001_src_channel),                             //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (rsp_demux_008_src1_ready),                            //     sink0.ready
		.sink0_valid         (rsp_demux_008_src1_valid),                            //          .valid
		.sink0_channel       (rsp_demux_008_src1_channel),                          //          .channel
		.sink0_data          (rsp_demux_008_src1_data),                             //          .data
		.sink0_startofpacket (rsp_demux_008_src1_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (rsp_demux_008_src1_endofpacket),                      //          .endofpacket
		.sink1_ready         (rsp_demux_009_src1_ready),                            //     sink1.ready
		.sink1_valid         (rsp_demux_009_src1_valid),                            //          .valid
		.sink1_channel       (rsp_demux_009_src1_channel),                          //          .channel
		.sink1_data          (rsp_demux_009_src1_data),                             //          .data
		.sink1_startofpacket (rsp_demux_009_src1_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_009_src1_endofpacket),                      //          .endofpacket
		.sink2_ready         (rsp_demux_010_src1_ready),                            //     sink2.ready
		.sink2_valid         (rsp_demux_010_src1_valid),                            //          .valid
		.sink2_channel       (rsp_demux_010_src1_channel),                          //          .channel
		.sink2_data          (rsp_demux_010_src1_data),                             //          .data
		.sink2_startofpacket (rsp_demux_010_src1_startofpacket),                    //          .startofpacket
		.sink2_endofpacket   (rsp_demux_010_src1_endofpacket),                      //          .endofpacket
		.sink3_ready         (rsp_demux_011_src1_ready),                            //     sink3.ready
		.sink3_valid         (rsp_demux_011_src1_valid),                            //          .valid
		.sink3_channel       (rsp_demux_011_src1_channel),                          //          .channel
		.sink3_data          (rsp_demux_011_src1_data),                             //          .data
		.sink3_startofpacket (rsp_demux_011_src1_startofpacket),                    //          .startofpacket
		.sink3_endofpacket   (rsp_demux_011_src1_endofpacket)                       //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (54),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (61),
		.IN_PKT_TRANS_COMPRESSED_READ  (55),
		.IN_PKT_TRANS_WRITE            (57),
		.IN_PKT_BURSTWRAP_H            (67),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (70),
		.IN_PKT_BURST_SIZE_L           (68),
		.IN_PKT_RESPONSE_STATUS_H      (94),
		.IN_PKT_RESPONSE_STATUS_L      (93),
		.IN_PKT_TRANS_EXCLUSIVE        (60),
		.IN_PKT_BURST_TYPE_H           (72),
		.IN_PKT_BURST_TYPE_L           (71),
		.IN_PKT_ORI_BURST_SIZE_L       (95),
		.IN_PKT_ORI_BURST_SIZE_H       (97),
		.IN_ST_DATA_W                  (98),
		.OUT_PKT_ADDR_H                (90),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (100),
		.OUT_PKT_BYTE_CNT_L            (97),
		.OUT_PKT_TRANS_COMPRESSED_READ (91),
		.OUT_PKT_BURST_SIZE_H          (106),
		.OUT_PKT_BURST_SIZE_L          (104),
		.OUT_PKT_RESPONSE_STATUS_H     (130),
		.OUT_PKT_RESPONSE_STATUS_L     (129),
		.OUT_PKT_TRANS_EXCLUSIVE       (96),
		.OUT_PKT_BURST_TYPE_H          (108),
		.OUT_PKT_BURST_TYPE_L          (107),
		.OUT_PKT_ORI_BURST_SIZE_L      (131),
		.OUT_PKT_ORI_BURST_SIZE_H      (133),
		.OUT_ST_DATA_W                 (134),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) onchip_memory_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                        //       clk.clk
		.reset                (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (cmd_mux_009_src_valid),                                //      sink.valid
		.in_channel           (cmd_mux_009_src_channel),                              //          .channel
		.in_startofpacket     (cmd_mux_009_src_startofpacket),                        //          .startofpacket
		.in_endofpacket       (cmd_mux_009_src_endofpacket),                          //          .endofpacket
		.in_ready             (cmd_mux_009_src_ready),                                //          .ready
		.in_data              (cmd_mux_009_src_data),                                 //          .data
		.out_endofpacket      (onchip_memory_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_memory_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (onchip_memory_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_memory_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_memory_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_memory_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (27),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (37),
		.IN_PKT_BYTE_CNT_L             (34),
		.IN_PKT_TRANS_COMPRESSED_READ  (28),
		.IN_PKT_TRANS_WRITE            (30),
		.IN_PKT_BURSTWRAP_H            (40),
		.IN_PKT_BURSTWRAP_L            (38),
		.IN_PKT_BURST_SIZE_H           (43),
		.IN_PKT_BURST_SIZE_L           (41),
		.IN_PKT_RESPONSE_STATUS_H      (67),
		.IN_PKT_RESPONSE_STATUS_L      (66),
		.IN_PKT_TRANS_EXCLUSIVE        (33),
		.IN_PKT_BURST_TYPE_H           (45),
		.IN_PKT_BURST_TYPE_L           (44),
		.IN_PKT_ORI_BURST_SIZE_L       (68),
		.IN_PKT_ORI_BURST_SIZE_H       (70),
		.IN_ST_DATA_W                  (71),
		.OUT_PKT_ADDR_H                (54),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (61),
		.OUT_PKT_TRANS_COMPRESSED_READ (55),
		.OUT_PKT_BURST_SIZE_H          (70),
		.OUT_PKT_BURST_SIZE_L          (68),
		.OUT_PKT_RESPONSE_STATUS_H     (94),
		.OUT_PKT_RESPONSE_STATUS_L     (93),
		.OUT_PKT_TRANS_EXCLUSIVE       (60),
		.OUT_PKT_BURST_TYPE_H          (72),
		.OUT_PKT_BURST_TYPE_L          (71),
		.OUT_PKT_ORI_BURST_SIZE_L      (95),
		.OUT_PKT_ORI_BURST_SIZE_H      (97),
		.OUT_ST_DATA_W                 (98),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) lcd_avalon_lcd_slave_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                            //       clk.clk
		.reset                (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (router_003_src_valid),                                     //      sink.valid
		.in_channel           (router_003_src_channel),                                   //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                             //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                               //          .endofpacket
		.in_ready             (router_003_src_ready),                                     //          .ready
		.in_data              (router_003_src_data),                                      //          .data
		.out_endofpacket      (lcd_avalon_lcd_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (lcd_avalon_lcd_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (lcd_avalon_lcd_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (lcd_avalon_lcd_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (lcd_avalon_lcd_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (lcd_avalon_lcd_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (90),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (100),
		.IN_PKT_BYTE_CNT_L             (97),
		.IN_PKT_TRANS_COMPRESSED_READ  (91),
		.IN_PKT_TRANS_WRITE            (93),
		.IN_PKT_BURSTWRAP_H            (103),
		.IN_PKT_BURSTWRAP_L            (101),
		.IN_PKT_BURST_SIZE_H           (106),
		.IN_PKT_BURST_SIZE_L           (104),
		.IN_PKT_RESPONSE_STATUS_H      (130),
		.IN_PKT_RESPONSE_STATUS_L      (129),
		.IN_PKT_TRANS_EXCLUSIVE        (96),
		.IN_PKT_BURST_TYPE_H           (108),
		.IN_PKT_BURST_TYPE_L           (107),
		.IN_PKT_ORI_BURST_SIZE_L       (131),
		.IN_PKT_ORI_BURST_SIZE_H       (133),
		.IN_ST_DATA_W                  (134),
		.OUT_PKT_ADDR_H                (54),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (61),
		.OUT_PKT_TRANS_COMPRESSED_READ (55),
		.OUT_PKT_BURST_SIZE_H          (70),
		.OUT_PKT_BURST_SIZE_L          (68),
		.OUT_PKT_RESPONSE_STATUS_H     (94),
		.OUT_PKT_RESPONSE_STATUS_L     (93),
		.OUT_PKT_TRANS_EXCLUSIVE       (60),
		.OUT_PKT_BURST_TYPE_H          (72),
		.OUT_PKT_BURST_TYPE_L          (71),
		.OUT_PKT_ORI_BURST_SIZE_L      (95),
		.OUT_PKT_ORI_BURST_SIZE_H      (97),
		.OUT_ST_DATA_W                 (98),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) onchip_memory_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                        //       clk.clk
		.reset                (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (router_011_src_valid),                                 //      sink.valid
		.in_channel           (router_011_src_channel),                               //          .channel
		.in_startofpacket     (router_011_src_startofpacket),                         //          .startofpacket
		.in_endofpacket       (router_011_src_endofpacket),                           //          .endofpacket
		.in_ready             (router_011_src_ready),                                 //          .ready
		.in_data              (router_011_src_data),                                  //          .data
		.out_endofpacket      (onchip_memory_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_memory_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (onchip_memory_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_memory_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_memory_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_memory_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (54),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (61),
		.IN_PKT_TRANS_COMPRESSED_READ  (55),
		.IN_PKT_TRANS_WRITE            (57),
		.IN_PKT_BURSTWRAP_H            (67),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (70),
		.IN_PKT_BURST_SIZE_L           (68),
		.IN_PKT_RESPONSE_STATUS_H      (94),
		.IN_PKT_RESPONSE_STATUS_L      (93),
		.IN_PKT_TRANS_EXCLUSIVE        (60),
		.IN_PKT_BURST_TYPE_H           (72),
		.IN_PKT_BURST_TYPE_L           (71),
		.IN_PKT_ORI_BURST_SIZE_L       (95),
		.IN_PKT_ORI_BURST_SIZE_H       (97),
		.IN_ST_DATA_W                  (98),
		.OUT_PKT_ADDR_H                (27),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (37),
		.OUT_PKT_BYTE_CNT_L            (34),
		.OUT_PKT_TRANS_COMPRESSED_READ (28),
		.OUT_PKT_BURST_SIZE_H          (43),
		.OUT_PKT_BURST_SIZE_L          (41),
		.OUT_PKT_RESPONSE_STATUS_H     (67),
		.OUT_PKT_RESPONSE_STATUS_L     (66),
		.OUT_PKT_TRANS_EXCLUSIVE       (33),
		.OUT_PKT_BURST_TYPE_H          (45),
		.OUT_PKT_BURST_TYPE_L          (44),
		.OUT_PKT_ORI_BURST_SIZE_L      (68),
		.OUT_PKT_ORI_BURST_SIZE_H      (70),
		.OUT_ST_DATA_W                 (71),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) lcd_avalon_lcd_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                            //       clk.clk
		.reset                (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                    //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                  //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                            //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                              //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                    //          .ready
		.in_data              (cmd_mux_001_src_data),                                     //          .data
		.out_endofpacket      (lcd_avalon_lcd_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (lcd_avalon_lcd_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (lcd_avalon_lcd_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (lcd_avalon_lcd_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (lcd_avalon_lcd_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (lcd_avalon_lcd_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                    // (terminated)
	);

	nios_ii_base_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                           //         .error
	);

	nios_ii_base_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (lcd_avalon_lcd_slave_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (lcd_avalon_lcd_slave_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (lcd_avalon_lcd_slave_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                    //         .error
	);

	nios_ii_base_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                    // in_clk_0.clk
		.in_rst_0_reset (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),              // in_rst_0.reset
		.in_0_data      (sw_sliders_avalon_parallel_port_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sw_sliders_avalon_parallel_port_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sw_sliders_avalon_parallel_port_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                                 //         .error
	);

	nios_ii_base_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                    // in_clk_0.clk
		.in_rst_0_reset (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),              // in_rst_0.reset
		.in_0_data      (leds_green_avalon_parallel_port_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (leds_green_avalon_parallel_port_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (leds_green_avalon_parallel_port_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                                 //         .error
	);

	nios_ii_base_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                  // in_clk_0.clk
		.in_rst_0_reset (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (leds_red_avalon_parallel_port_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (leds_red_avalon_parallel_port_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (leds_red_avalon_parallel_port_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                               //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                              //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                              //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                               //         .error
	);

	nios_ii_base_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (hex_3_avalon_parallel_port_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (hex_3_avalon_parallel_port_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (hex_3_avalon_parallel_port_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                            //         .error
	);

	nios_ii_base_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (hex_7_avalon_parallel_port_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (hex_7_avalon_parallel_port_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (hex_7_avalon_parallel_port_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                            //         .error
	);

	nios_ii_base_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                     // in_clk_0.clk
		.in_rst_0_reset (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (pushbuttons_avalon_parallel_port_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (pushbuttons_avalon_parallel_port_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (pushbuttons_avalon_parallel_port_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                                 //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                                 //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                                  //         .error
	);

	nios_ii_base_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                // in_clk_0.clk
		.in_rst_0_reset (NIOS_II_Processor_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios_ii_processor_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios_ii_processor_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios_ii_processor_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                             //         .error
	);

	nios_ii_base_mm_interconnect_0_avalon_st_adapter_009 #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_memory_s1_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (onchip_memory_s1_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (onchip_memory_s1_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                    //         .error
	);

	nios_ii_base_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_0_s1_agent_rdata_fifo_src_data),                //     in_0.data
		.in_0_valid     (timer_0_s1_agent_rdata_fifo_src_valid),               //         .valid
		.in_0_ready     (timer_0_s1_agent_rdata_fifo_src_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                    //         .error
	);

	nios_ii_base_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (NIOS_II_Processor_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_1_s1_agent_rdata_fifo_src_data),                //     in_0.data
		.in_0_valid     (timer_1_s1_agent_rdata_fifo_src_valid),               //         .valid
		.in_0_ready     (timer_1_s1_agent_rdata_fifo_src_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                    //         .error
	);

endmodule
